<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on 老麦的书房</title><link>https://typonotes.com/categories/docker/</link><description>Recent content in docker on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 11 Jul 2023 14:58:26 +0800</lastBuildDate><atom:link href="https://typonotes.com/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 制作容器镜像的时候， 一定不能 All In One 吗?</title><link>https://typonotes.com/posts/2023/07/11/docker-image-all-in-one-policy/</link><pubDate>Tue, 11 Jul 2023 14:58:26 +0800</pubDate><guid>https://typonotes.com/posts/2023/07/11/docker-image-all-in-one-policy/</guid><description>Docker 制作容器镜像的时候， 一定不能 All In One 吗? 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2023/07/11/docker-image-all-in-one-policy/ All in One 指的是把所有依赖都制作到同一个镜像中， 比如 app, mysql, redis。 一般来说 不要， 尽量保证一个镜像一个 应用。 解耦合。 可以这么理解 容器重启相当于机器重启 ， 也就是 容器内的服务全部重启。 因此做镜像的时候应该尽</description></item><item><title>如果你还搞不懂 Docker In Docker（DinD） 模式下的资源管理， 不妨看看这篇文章</title><link>https://typonotes.com/posts/2023/04/04/docker-dind-mode-introduce/</link><pubDate>Tue, 04 Apr 2023 16:29:06 +0800</pubDate><guid>https://typonotes.com/posts/2023/04/04/docker-dind-mode-introduce/</guid><description>如果你还搞不懂 Docker In Docker（DinD） 模式下的资源管理， 不妨看看这篇文章 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/04/04/docker-dind-mode-introduce/ 今天遇到了一个群友关于 Docker DinD 的问题。 有人熟悉docker in docker么 请教个问题, 我现在在docker-1里面挂载了</description></item><item><title>Docker 连夜发文 将强制清理免费组织账号， 是收割还是真穷？</title><link>https://typonotes.com/posts/2023/03/16/docker-sunset-free-team-organizations/</link><pubDate>Thu, 16 Mar 2023 22:22:47 +0800</pubDate><guid>https://typonotes.com/posts/2023/03/16/docker-sunset-free-team-organizations/</guid><description>Docker 连夜发文称强制清理免费组织， 是收割还是真穷？ 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/03/16/docker-sunset-free-team-organizations/ 2023年3月15日凌晨（真会选时间）， Docker 发布了一封邮件 Docker正在淘汰免费组织（Docker is sunsetting Free Team organizations）。 邮件中指出</description></item><item><title>在 Docker 容器中设置时区原来这么简单</title><link>https://typonotes.com/posts/2022/12/21/docker-container-set-timezone/</link><pubDate>Wed, 21 Dec 2022 20:49:12 +0800</pubDate><guid>https://typonotes.com/posts/2022/12/21/docker-container-set-timezone/</guid><description>Docker 容器中设置时区 在 linux 中， 通过 /etc/timezone 这个文件设置。 可以通过如下命令 持久化 时区设置， 其中 Asia/Shanghai 是我们需要的时区。 1 cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/timezone 容器中设置时区一直是独立于宿主机的。 可以通过挂载 /etc/timezone 的方式保持与宿主机时间一致。 1 docker run --rm -it -v /etc/timezone:/etc/timezone debian bash 这种方法只适合 本地的、简单的、临时的 容器。 容器有一个很重要的特点， 就是 一处</description></item><item><title>使用 docker buildx 实现多平台编译 - 案例篇</title><link>https://typonotes.com/posts/2020/11/07/docker-buildx-examples/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2020/11/07/docker-buildx-examples/</guid><description>使用 docker buildx 实现多平台编译 - 案例篇 之前的文章中 使用 docker buildx 实现多平台编译 - 环境篇 介绍了如何部署 docker buildx 环境。 笔者本文将要分享自身在使用中的几个比较有意义的案例 0x00 先说结论 docker buildx 本身运行于容器环境， 所以 scheduler 和 builder 本机配置（ex, /etc/hosts, /etc/docker/daemon.json ） 的大部分配置和场景 其实是不可用的。 使用 ssh://user@host 可以方便的执行远程构建， 尤其</description></item><item><title>Dockerfile 中 ARG 的使用与其的作用域探究</title><link>https://typonotes.com/posts/2020/11/06/dockerfiles-args-scope/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2020/11/06/dockerfiles-args-scope/</guid><description>只有搞懂 Dockerfile 中的 ARG 作用域， 才能算 Build 镜像 CI 刚入门 之前我们讨论了 面试问 Dockerfile 的优化， 千万不要只会说减少层数 ， 详细说明 Dockerfile 的优化原理和操作方法， 给大家概括了 简单易记 的口诀。 今天， 我们继续来探讨一下， Dockerfile 中的另外一个利器 &amp;ndash; ARG。 如果说掌握 Dockerfile 的优化， 勉强算作读完秘籍的目录。 那只有 熟练 掌握了 ARG 的用法</description></item><item><title>使用 Dockerfile 构建镜像注意事项</title><link>https://typonotes.com/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</guid><description>面试问 Dockerfile 的优化， 千万不要只会说减少层数 在面试的时候， 我通常都会问「如果优化 Dockerfile」？ 面试的朋友大部分都会说 使用更小的基础镜像， 比如 alpine. 减少镜像层数， 使用 &amp;amp;&amp;amp; 符号将命令链接起来。 好一点的面试者 我会给基础镜像打上 安全补丁。 但这些都没说到点上。 优化 Dockerfile 的核心是 合理分层。 为什么要</description></item><item><title>使用 docker buildx 实现多平台编译 - 环境篇</title><link>https://typonotes.com/posts/2020/06/10/docker-buildx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2020/06/10/docker-buildx/</guid><description>使用 docker buildx 实现多平台编译 docker registry api v2 支持多 CPU 架构镜像. 同时 harbor v2 也实现了 docker registry api v2 的支持. 0x01 准备 docker 开启实验模式 buildx 插件 qemu 模拟器 Linux kernel &amp;gt;= 4.8 linux 系统内核 由于 binfmt_misc 机制开启需要依赖 Linux kernel &amp;gt;= 4.8 。 因此，在对 linux 系统操作选型上有一定要求。 建议使用 发行版 出场内核已经满足需求的操作系统。 而不是选择自己升级系统内核。 ubuntu:18.04 LTS</description></item></channel></rss>