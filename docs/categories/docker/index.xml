<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on 老麦的书房</title><link>https://tangx.in/categories/docker/</link><description>Recent content in docker on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 21 Dec 2022 20:49:12 +0800</lastBuildDate><atom:link href="https://tangx.in/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Docker 容器中设置时区原来这么简单</title><link>https://tangx.in/posts/2022/12/21/docker-container-set-timezone/</link><pubDate>Wed, 21 Dec 2022 20:49:12 +0800</pubDate><guid>https://tangx.in/posts/2022/12/21/docker-container-set-timezone/</guid><description>Docker 容器中设置时区 在 linux 中， 通过 /etc/timezone 这个文件设置。 可以通过如下命令 持久化 时区设置， 其中 Asia/Shanghai 是我们需要的时区。 1 cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/timezone 容器中设置时区一直是独立于宿主机的。 可以通过挂载 /etc/timezone 的方式保持与宿主机时间一致。 1 docker run --rm -it -v /etc/timezone:/etc/timezone debian bash 这种方法只适合 本地的、简单的、临时的 容器。 容器有一个很重要的特点， 就是 一处</description></item><item><title>使用 docker buildx 实现多平台编译 - 案例篇</title><link>https://tangx.in/posts/2020/11/07/docker-buildx-examples/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/11/07/docker-buildx-examples/</guid><description>使用 docker buildx 实现多平台编译 - 案例篇 之前的文章中 使用 docker buildx 实现多平台编译 - 环境篇 介绍了如何部署 docker buildx 环境。 笔者本文将要分享自身在使用中的几个比较有意义的案例 0x00 先说结论 docker buildx 本身运行于容器环境， 所以 scheduler 和 builder 本机配置（ex, /etc/hosts, /etc/docker/daemon.json ） 的大部分配置和场景 其实是不可用的。 使用 ssh://user@host 可以方便的执行远程构建， 尤其</description></item><item><title>Dockerfile 中 ARG 的使用与其的作用域探究</title><link>https://tangx.in/posts/2020/11/06/dockerfiles-args-scope/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/11/06/dockerfiles-args-scope/</guid><description>Dockerfile 中 ARG 的使用与其的作用域探究 使用 ARG 可以有效的复用 Dockerfile。 每次镜像更新，只需要动态的在 build 命令中传入新的参数值即可。 0x01 结论 在第一个 FROM 之前的所有 ARG , 在所有 FROM 中生效, 仅在 FROM 中生效 在 FROM 后的 ARG, 仅在当前 FROM 作用域生效。 即尽在当前 阶段 (stage) 生效 对照组解析 在随后的 Dockerfile 中, 只定义了一个变量 image ,</description></item><item><title>使用 Dockerfile 构建镜像注意事项</title><link>https://tangx.in/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</guid><description>怎样去构建一个优质的 Docker 容器镜像 在面试的时候， 我通常都会问「如果优化 Dockerfile」？ 面试的朋友大部分都会说 使用更小的基础镜像， 比如 alpine. 减少镜像层数， 使用 &amp;amp;&amp;amp; 符号将命令链接起来。 好一点的面试者 我会给基础镜像打上 安全补丁。 但这些都没说到点上。 优化 Dockerfile 的核心是 合理分层。 为什么要优化镜像</description></item></channel></rss>