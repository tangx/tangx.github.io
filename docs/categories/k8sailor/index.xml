<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>k8sailor on 老麦的书房</title><link>https://maicode.cc/categories/k8sailor/</link><description>Recent content in k8sailor on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 10 Jan 2023 10:28:03 +0800</lastBuildDate><atom:link href="https://maicode.cc/categories/k8sailor/index.xml" rel="self" type="application/rss+xml"/><item><title>开发 k8s 管理平台 - k8sailor - 01. 使用 k3s 快速搭建项目环境</title><link>https://maicode.cc/posts/books/k8sailor/chapter01/01-install-k3s-cluster/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter01/01-install-k3s-cluster/</guid><description>开发 k8s 管理平台 - k8sailor - 01. 使用 k3s 快速搭建项目环境 原文地址: https://tangx.in/posts/books/k8sailor/chapter01/01-install-k3s-cluster/ 安装 k3s 安装过程参考 https://tangx.in/2021/06/07/k3s-architecture-single-server/ k3s 集群版本为 v1.21.4。 因此 k8s client-go sdk 的版本也需要安装对应版本 1 2 3 4 5 6 7 8 9 10 11 # curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - [INFO] Finding release for channel stable [INFO] Using v1.21.4+k3s1 as release [INFO] Downloading hash http://rancher-mirror.cnrancher.com/k3s/v1.21.4-k3s1/sha256sum-amd64.txt [INFO] Downloading binary http://rancher-mirror.cnrancher.com/k3s/v1.21.4-k3s1/k3s [INFO] Verifying binary download [INFO] Installing k3s to /usr/local/bin/k3s ... 省略 初始化环境 通过命令创建一些工作负载， 以便后</description></item><item><title>开发 k8s 管理平台 - k8sailor 02. 使用 cobra 初始化程序命令与参数</title><link>https://maicode.cc/posts/books/k8sailor/chapter01/02-design-cobra-command/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter01/02-design-cobra-command/</guid><description>开发 k8s 管理平台 - k8sailor 02. 使用 cobra 初始化程序命令与参数 原文地址: https://tangx.in/posts/books/k8sailor/chapter01/02-design-cobra-command/ tag: https://github.com/tangx/k8sailor/tree/feat/01-cobra-command 为了更加方便的管理配置文件的来源， 这里使用 cobra 进行命令行构建 效果如下 1 2 3 4 5 6 7 8 9 cd cmd/k8sailor &amp;amp;&amp;amp; go run . k8s 管理平台 Usage: k8sailor [flags] Flags: --config string k8s 配置授权文件 (default &amp;#34;./k8sconfig/config.yml&amp;#34;) -h, --help help for k8sailor 编码 变量管理 在 cmd/k8sailor/global 目录中管理 全局 变量。 其中，定义一个 CmdFlag 结构体管理所有 cobra fl</description></item><item><title>开发 k8s 管理平台 - k8sailor 03. 使用 client-go sdk 链接集群</title><link>https://maicode.cc/posts/books/k8sailor/chapter01/03-connect-cluster/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter01/03-connect-cluster/</guid><description>开发 k8s 管理平台 - k8sailor 03. 使用 client-go sdk 链接集群 原文地址: https://tangx.in/posts/books/k8sailor/chapter01/03-connect-cluster/ tag: https://github.com/tangx/k8sailor/tree/feat/02-connect-cluster 使用 sdk 链接 k3s cluster 并获取 deployment 信息 1 2 3 4 cd cmd/k8sailor &amp;amp;&amp;amp; go run . * my-nginx-1 (1 replicas) * my-nginx-2 (2 replicas) 下载 client-go sdk 之前在安装 k3s 集群的时候，版本是 v0.21.4。 因此。 这里选择 client-go sdk 的版本也是 v0.21.4 如果还有其他环境， 可以使用 go mod edit 命令锁定 client-go 的版本 1 2 3 go get k8s.io/client-go@v0.21.4 go mod edit -replace=k8s.io/client-go=k8s.io/client-go@v0.21.4 连接集群并获取</description></item><item><title>开发 k8s 管理平台 - k8sailor 04. 使用 gin 创建第一个 API 接口</title><link>https://maicode.cc/posts/books/k8sailor/chapter01/04-init-httpserver/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter01/04-init-httpserver/</guid><description>开发 k8s 管理平台 - k8sailor 04. 使用 gin 创建第一个 API 接口 原文地址: https://tangx.in/posts/books/k8sailor/chapter01/04-init-httpserver/ tag: https://github.com/tangx/k8sailor/tree/feat/04-httpserver-initial 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 cd cmd/k8sailor &amp;amp;&amp;amp; go run . httpserver 启动 web 服务器 Usage: k8sailor httpserver [flags] Flags: -h, --help help for httpserver Global Flags: --config string k8s 配置授权文件 (default &amp;#34;./k8sconfig/config.yml&amp;#34;) 2021/09/24 07:56:51 open config/local.yml: no such file or directory [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in &amp;#34;debug&amp;#34; mode. Switch to &amp;#34;release&amp;#34; mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] GET /k8sailor/v0/ping --&amp;gt; github.com/tangx/k8sailor/cmd/k8sailor/apis.RootGroup.func1 (3 handlers) [GIN-debug] Listening</description></item><item><title>开发 k8s 管理平台 - k8sailor 05. RESTFul API 接口规范与请求应答约定</title><link>https://maicode.cc/posts/books/k8sailor/chapter01/05-design-restful-api-and-response-data/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter01/05-design-restful-api-and-response-data/</guid><description>开发 k8s 管理平台 - k8sailor 05. RESTFul API 接口规范与请求应答约定 原文地址: https://tangx.in/posts/books/k8sailor/chapter01/05-design-restful-api-and-response-data/ tag: https://github.com/tangx/k8sailor/tree/feat/05-design-restful-api-and-response-data 强烈建议使用 RESTful 风格来设计 API 文档。 RESTful api 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # kubectl create deployment nginx-tools --image nginx:alpine --output=yaml --dry-run=client apiVersion: apps/v1 kind: Deployment metadata: creationTimestamp: null labels: app: nginx-tools name: nginx-tools # ... 省略 # kubectl create namespace hello --dry-run=client -o yaml apiVersion: v1 kind: Namespace metadata: creationTimestamp: null name: hello # ... 省略 可以看到， k8s api 中都有一个对应的 kind 描述资源类型， 这个正好符</description></item><item><title>开发 k8s 管理平台 - k8sailor 06. 使用 api/biz/dao 分层结构管理数据请求，获取 deployment 数据</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/06-get-all-deployments/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/06-get-all-deployments/</guid><description>开发 k8s 管理平台 - k8sailor 06. 使用 api/biz/dao 分层结构管理数据请求，获取 deployment 数据 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/06-get-all-deployments/ tag: https://github.com/tangx/k8sailor/tree/feat/06-get-all-deployments client -&amp;gt; apis -&amp;gt; biz -&amp;gt; dao -&amp;gt; 将业务逻辑部分分为经典三层，想法是这样的，可能实现有错误。 apis 接入层: 只用于管理 http 请求与交互。 biz 业务层: 用于处理 api 层来的请求， 封装原始数据 dao 数据访问层: 与数据库, cluster 等交互。 存取数据。 重新调整目</description></item><item><title>开发 k8s 管理平台 - k8sailor 07. (前端) 使用 vite 初始化 vue3 项目</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/07-initial-vue3-vite2/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/07-initial-vue3-vite2/</guid><description>开发 k8s 管理平台 - k8sailor 07. (前端) 使用 vite 初始化 vue 项目 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/07-initial-vue3-vite2/ 安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 初始化项目 yarn create vite webapp --template vue-ts cd webapp ## 安装依赖 yarn ## 启动查看 vue3 是否正常 yarn dev ## 安装 less 支持， 以后写样式用 yarn add less 清理环境 删除 /webapp/src/components 下的 HelloWorld.vue。 并新建一个 Deployment.vue。 这里使</description></item><item><title>开发 k8s 管理平台 - k8sailor 08. 获取并展示 Deployments 信息</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/08-fetch-and-display-deployments/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/08-fetch-and-display-deployments/</guid><description>开发 k8s 管理平台 - k8sailor 08. 获取并展示 Deployments 信息 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/08-fetch-and-display-deployments/ tag: https://github.com/tangx/k8sailor/tree/feat/08-fetch-and-display-deployments 使用 Axios 请求 Deployments 数据 安装 axios 客户端 1 2 # 安装 axios yarn add axios 创建 /webapp/src/apis 目录， 用于存放所有针对 k8sailor 后端的数据请求 使用 axios config 模式初始化一个客户端 /webapp/src/apis/httpc.ts axios config 模式可以创建一个 http 客户端，其中包含了各种各样的初始化参数， 使用这个模式就不用在每个请求中都写重复的内容了</description></item><item><title>开发 k8s 管理平台 - k8sailor 09. 通过 deployment label 获取 pod 信息</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/09-get-pods-by-deployment-label/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/09-get-pods-by-deployment-label/</guid><description>开发 k8s 管理平台 - k8sailor 09. 通过 deployment label 获取 pod 信息 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/09-get-pods-by-deployment-label/ tag: https://github.com/tangx/k8sailor/tree/feat/09-get-pods-by-deployment-label 有了之前结构铺垫， 获取 Pod 还是很简单简单的。 其中需要注意的是 ListOptions 中的 LabelSelector 是一个字符串， 多组 key=value 之间使用 逗号 , 进行连接。 1 labelSelector := `key1=value1,key2=value2,...` 而通过 client-go API 获取的 Deployment, Pod 等信息中的 MatchLabel 字段是一个 map[string]string 的 map。 因此， 在使用 k8s client 查询的时候， 需要对进行一些传参转换。 1</description></item><item><title>开发 k8s 管理平台 - k8sailor 10. (前端) 使用 vue-router 进行路由管理</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/10-vue-router-and-less/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/10-vue-router-and-less/</guid><description>开发 k8s 管理平台 - k8sailor 10. (前端) 使用 vue-router 进行路由管理 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/10-vue-router-and-less/ tag: https://github.com/tangx/k8sailor/tree/feat/10-vue-router-and-less 使用 vue-router 路由管理 安装 vue-router 支持参考 https://tangx.in/2021/09/28/vue3-vue-router/ 将默认的 /webapp/src/App.vue 作为最基本的入口， 除了引入 Index.vue 文件模块，不进行其他操作， 保持整洁。 其行为类似 golang 中的 main.go。 创建 /webapp/src/components/Index.vue 模块作为 index 入口文件， 也是主要的布局页面。 路由信息(router-link) 将</description></item><item><title>开发 k8s 管理平台 - k8sailor 11. 展示 deployment 详情页</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/11-display-deployment-detail/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/11-display-deployment-detail/</guid><description>开发 k8s 管理平台 - k8sailor 11. 展示 deployment 详情页 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/11-display-deployment-detail/ tag: https://github.com/tangx/k8sailor/tree/feat/11-display-deployment-detail 之前在后端已经将详情页的展示接口拆成了 2个 其一是根据 name 获取 单个 deployment /deployments/:name 其二是根据 deployment name 获取 关联 的 pods 信息 /deployments/:name/pod 页面展示就是两个接口请求与数据展示的简单操作， 和之前 deployment 页面一样， 没什么好说的。 typescript 的 interface 衍生 不过， 在遇到第二个、第三个接口出现的时候， 发现</description></item><item><title>开发 k8s 管理平台 - k8sailor 12. 设置 deployment 副本数量 与 参数的有效性验证</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/12-deployment-scale-and-params-validate/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/12-deployment-scale-and-params-validate/</guid><description>开发 k8s 管理平台 - k8sailor 12. 设置 deployment 副本数量 与 参数的有效性验证 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/12-deployment-scale-and-params-validate/ tag: https://github.com/tangx/k8sailor/tree/feat/12-deployment-scale-and-params-validate deployment scale 1 kubectl scale deployment my-nginx-1 --replicas 1 在 client-go sdk 中， scale 参数是一个对象， 因此不能直接传入 一个数字。 需要通过 GetScale() 方法获取到 *autoscalingv1.Scale 对象。 修改 Scale 对象中的 Replicas 数值。 使用 UpdateScale() 方法更新设置。 SetDeploymentReplicas params validtor 参数验证在任何情况下都不能放松警惕， 尤其是 边界验证 和 0值混淆 。 对</description></item><item><title>开发 k8s 管理平台 - k8sailor 13. 使用 k8s informer 订阅集群事件</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/13-k8s-informer/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/13-k8s-informer/</guid><description>开发 k8s 管理平台 - k8sailor 13. 使用 k8s informer 订阅集群事件 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/13-k8s-informer/ tag: https://github.com/tangx/k8sailor/tree/feat/13-k8s-informer 从应用层面来说， 创建 informer 并启动之后就与 k8s cluster 创建了一个长链接并订阅了 某个资源 Resource 的变化。 至于订阅后得到的数据要怎么用完全取决于订阅者的业务设计。 Shared Informer Factory 共享机制 Informer 又称为 Shared Informer，表明是可以共享使用的，在使用 client-go 写代码时，若同</description></item><item><title>开发 k8s 管理平台 - k8sailor 14. 一些前后端代码优化</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/14-some-optimize/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/14-some-optimize/</guid><description>开发 k8s 管理平台 - k8sailor 14. 一些前后端代码优化 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/14-some-optimize/ tag: https://github.com/tangx/k8sailor/tree/feat/14-some-optimize 将 LabelSelector 转换为 Selector client-go 提供了一个方法， 可以将 Resource 中的 LabelSelector 转换为 Selector, 并且 Selector 结构提供了一些常用的方法。 如 String 1 2 3 4 5 6 7 8 9 import ( metav1 &amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34; ) func() { selector, _ := metav1.LabelSelectorAsSelector(dep.Spec.Selector) x := selector.String() fmt.Println(x) }() 因此在使用 GetXXXByLabels 时， api 层 可以考虑 接收 map[string]string 类型的参数。 而在 biz 层应该将 不同类型 的参数 统一 转换为格式</description></item><item><title>开发 k8s 管理平台 - k8sailor 15. 根据名字删除 deployment 和 pod</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/15-delete-deployment-and-pod-by-name/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/15-delete-deployment-and-pod-by-name/</guid><description>开发 k8s 管理平台 - k8sailor 15. 根据名字删除 deployment 和 pod 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/15-delete-deployment-and-pod-by-name/ tag: https://github.com/tangx/k8sailor/tree/feat/15-delete-deployment-and-pod-by-name 调用 k8s api 没什么好说的。 k8sdao 1 2 3 4 5 func DeleteDeploymentByName(ctx context.Context, namespace string, name string) error { opts := metav1.DeleteOptions{} return clientset.AppsV1().Deployments(namespace).Delete(ctx, name, opts) } biz 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type DeleteDeploymentByNameInput struct { Name string `uri:&amp;#34;name&amp;#34;` Namespace string `query:&amp;#34;namespace&amp;#34;` } // DeleteDeploymentByName 根据名字删除 deployment func DeleteDeploymentByName(ctx context.Context, input DeleteDeploymentByNameInput) error { err := k8sdao.DeleteDeploymentByName(ctx, input.Namespace, input.Name) if err != nil { return fmt.Errorf(&amp;#34;k8s internal error: %w&amp;#34;, err) } return nil } api 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func handlerDeleteDeploymentByName(c</description></item><item><title>开发 k8s 管理平台 - k8sailor 16. 创建 Deployment</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/16-create-deployment/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/16-create-deployment/</guid><description>开发 k8s 管理平台 - k8sailor 16. 创建 Deployment 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/16-create-deployment/ tag: https://github.com/tangx/k8sailor/tree/feat/16-create-deployment 使用 kubectl 命令创建如下 1 kubectl create deployment my-nginx-5 --image=nginx:alpine --replicas=3 --port=80 创建成功后查看结果， 大部分参数为默认参数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # kgd -o yaml my-nginx-5 apiVersion: apps/v1 kind: Deployment metadata: labels: app: my-nginx-5 # 根据 deployment 自动匹配名字自动生成 name: my-nginx-5 # 用户指定 namespace: default # 用户选择，默认为当前 namespace spec: progressDeadlineSeconds: 600 # 默认</description></item><item><title>开发 k8s 管理平台 - k8sailor 17. Pod 的阶段(phase)与状态(status)</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/17-pod-phase-and-status/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/17-pod-phase-and-status/</guid><description>开发 k8s 管理平台 - k8sailor 17. Pod 的阶段(phase)与状态(status) 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/17-pod-phase-and-status/ Pod 的生命周期 https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/ Pod 的 Status 不是 Phase。 Pod 的 Status 需要根据 Pod 中的 ContainerStatuses 进行计算得到。 Phase 阶段 描述 Pending（悬决） Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待 Pod 被调度的时间和通过网络下载镜</description></item><item><title>开发 k8s 管理平台 - k8sailor 19. 为 Deployment 创建 Service</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/19-create-service/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/19-create-service/</guid><description>开发 k8s 管理平台 - k8sailor 19. 为 Deployment 创建 Service 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/19-create-service/ tag: https://github.com/tangx/k8sailor/tree/feat/19-create-service https://kubernetes.io/zh/docs/concepts/services-networking/service/#externalname 1 2 3 kubectl create service clusterip nginx-web --clusterip=&amp;#34;port:targetPort&amp;#34; kubectl create service clusterip nginx-web --clusterip=&amp;#34;8082:80&amp;#34; kubectl create service nodeport nginx-web --clusterip=&amp;#34;8081:80&amp;#34; 需要注意, 使用 kubectl get service 查看到的 Ports 的展示结果为 port:nodePort， 而 targetPort 不展示。 1 2 3 # kubectl get service NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE demo-nginx-nodeport-3 NodePort 10.43.181.29 &amp;lt;none&amp;gt; 80:32425/TCP 4s port, targetPort, nodePort 端口映射中的四个 比较关键 的要素: name: 避免端口相同时，默认名字冲突 port:</description></item><item><title>开发 k8s 管理平台 - k8sailor 20. 为 Deployment 创建 Ingress</title><link>https://maicode.cc/posts/books/k8sailor/chapter02/20-create-ingress/</link><pubDate>Tue, 10 Jan 2023 10:28:03 +0800</pubDate><guid>https://maicode.cc/posts/books/k8sailor/chapter02/20-create-ingress/</guid><description>开发 k8s 管理平台 - k8sailor 20. 为 Deployment 创建 Ingress 原文地址: https://tangx.in/posts/books/k8sailor/chapter02/01-install-k3s-cluster/ tag: https://github.com/tangx/k8sailor/tree/feat/20-create-ingress k8s ingress https://kubernetes.io/zh/docs/concepts/services-networking/ingress/ 1 2 3 4 # Create an ingress with a default backend kubectl create ingress ingdefault --class=default \ --default-backend=defaultsvc:http \ --rule=&amp;#34;foo.com/*=svc:8080,tls=secret1&amp;#34; --dry-run -o yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: creationTimestamp: null name: ingdefault spec: defaultBackend: service: name: defaultsvc port: name: http ingressClassName: default rules: - host: foo.com http: paths: - backend: service: name: svc port: number: 8080 path: / pathType: Prefix # 匹配方式 tls: - hosts: - foo.com secretName: secret1 status: loadBalancer: {} 路径类型 Ingress 中的每个</description></item></channel></rss>