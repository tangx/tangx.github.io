<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>istio on 一壶酒一溪云</title><link>https://tangx.in/categories/istio/</link><description>Recent content in istio on 一壶酒一溪云</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 27 Jan 2022 09:08:25 +0800</lastBuildDate><atom:link href="https://tangx.in/categories/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>《istio-in-action 系列》 1. 安装 docker-k3s-istio 开发环境</title><link>https://tangx.in/posts/books/istio-in-action/chapter01/01-install/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter01/01-install/</guid><description>《istio-in-action 系列》 1. 安装 docker-k3s-istio 开发环境 1. 安装 docker 我这里使用的是 ubuntu20.04LTS 操作系统 1 2 sudo apt update sudo apt install docker-ce 配置 docker 加速仓库 1 2 3 4 5 6 7 { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://mirror.ccs.tencentyun.com&amp;#34;, &amp;#34;https://wlzfs4t4.mirror.aliyuncs.com&amp;#34; ], &amp;#34;bip&amp;#34;: &amp;#34;169.253.32.1/24&amp;#34; } 上述是腾讯云和阿里云的加速仓库， 根据需求自行调整。 完成配置后， 重启 docker 1 2 systemctl daemon-reload systemctl restart docker 2. 安装 k3s 2.1 安装 k3s k3s 使用 --docker 模式是为了方便 docker build 产生的</description></item><item><title>《istio-in-action 系列》 1. 安装 docker-k3s-istio 开发环境</title><link>https://tangx.in/posts/books/istio-in-action/chapter01/02-initial-project/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter01/02-initial-project/</guid><description>《istio-in-action系列》 1. 初始化第一个项目 项目代码在 https://github.com/tangx/istio-in-action 命令中有很多快捷键， 参考 install and prepare 1. 创建 namespace 并开启整体 istio 注入 这里已经使用了 alias 命令别名， 如果看不懂， 请参考第一篇 1.1 创建 namespace myistio 1 2 3 4 5 6 kc ns myistio namespace/myistio created kns myistio Context &amp;#34;default&amp;#34; modified. Active namespace is &amp;#34;myistio&amp;#34;. 1.2 向 namespace 中开启 istio 注入 1 2 3 4 5 6 7 8 9 10 11 12 13 # 向 ns 加入标签</description></item><item><title>《istio-in-action 系列》 1. 安装 docker-k3s-istio 开发环境</title><link>https://tangx.in/posts/books/istio-in-action/chapter01/07-upgrade-project/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter01/07-upgrade-project/</guid><description>升级项目 之前的项目中只有 prod 服务，具有版本的区分。 现在对项目进行一些升级， 模拟一个多服务的项目。 两个服务， review / prod 服务之前还有调用关系。 prod -&amp;gt; review review 这次新加入了 review 评论服务。 { &amp;#34;1&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;zhangsan&amp;#34;, &amp;#34;commment&amp;#34;: &amp;#34;istio 功能很强大， 就是配置太麻烦&amp;#34; }, &amp;#34;2&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;wangwu&amp;#34;, &amp;#34;commment&amp;#34;: &amp;#34;《istio in action》 真是一本</description></item><item><title>《istio-in-action 系列》 1. 安装 docker-k3s-istio 开发环境</title><link>https://tangx.in/posts/books/istio-in-action/chapter01/16-lego-create-server-certificate/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter01/16-lego-create-server-certificate/</guid><description>使用 lego 创建 https 证书 https://go-acme.github.io/lego/dns/ 1 2 3 4 5 6 7 8 9 10 11 #!/bin/bash # cd $(dirname $0) source .env lego --email=&amp;#34;${EMAIL}&amp;#34; \ --key-type rsa2048 \ --domains=&amp;#34;${DOMAIN1}&amp;#34; \ --path=$(pwd) --dns $DNS_PROVIDER --accept-tos run</description></item><item><title>《istio-in-action 系列》 10. VirtualService 路由重定向</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/10-vs-http-redirect/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/10-vs-http-redirect/</guid><description>VirtualService 路由重定向 在 VirtualService 配置中， 除了 http rewrite 路由重写之外， 还有 http redirect 路由重定向。 即常说的 30x。 https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPRedirect http redirect VirtualService 重定向配置如下。 有三个重要参数 uri: 重定向后的 uri redirectCode: 重定向时的 http response code。 ex: 301, 302。 默认值为 301 。 authority: 重定向后的 http host。 即 http response header 中的 location 字段。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --- apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:</description></item><item><title>《istio-in-action 系列》 11. VirtualService 重试机制</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/11-vs-http-retry/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/11-vs-http-retry/</guid><description>VirtualService 重试机制 在 Istio VirtualService 中， 有一个很关键的机制： 重试。 发起重试不需要业务本身实现， 而是 istio 通过 envoy 发起的。 其中有几个关键参数 attempts: 重试次数（不含初始请求）， 即最大请求次数为 n+1。 perTryTimeout: 发起重试的间隔时间。 必须大于 1ms。 默认于 http route 中的 timeout 一致， 即无 timeout 时间 retryOn: 执行重试的触发条件。 条件值有 envoy 提供: https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on http retry 1</description></item><item><title>《istio-in-action 系列》 12. VirtualService 混沌测试/错误注入</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/12-vs-http-fault-injection/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/12-vs-http-fault-injection/</guid><description>VirtualService 混沌测试/错误注入 在 Istio 中还实现了一个很重要的功能: 错误注入。 可以设置 一定几率 出现 延迟(delay) 和 中止(abort) 错误。 Http Fault Injection Delay 延迟 一定概率出现 缓慢 相应。 fixedDelay: 延迟时间。 格式 1h / 1m / 1s。 最小 1ms。 percentage: 错误触发几率。 0-100 之间。 可以为 double 类型的小数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>《istio-in-action 系列》 13. VirtualService 服务委托</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/13-vs-http-delegate/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/13-vs-http-delegate/</guid><description>VirtualService 服务委托 服务委托就是流量转发。 https://istio.io/latest/docs/reference/config/networking/virtual-service/#Delegate 如下 VirtualService 的 流量委托 定义， 是在 myistio 这个命名空间中创建的。 但是将 myistio.tangx.in/prod 的流量转发到了命名空间 myistio-prod 中的 prod 服务中； 同样将 myistio.tangx.in/reviews 的流量转发到了命名空间 myistio-review 中的 review 服务中。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # vs http delegate apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata: name: vs-delegate namespace: myistio # 注意 namespace spec: gateways: - istio-tangx-in hosts: - istio.tangx.in http: - match: -</description></item><item><title>《istio-in-action 系列》 14. VirtualService Header 操作</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/14-vs-http-header-operation/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/14-vs-http-header-operation/</guid><description>VirtualService Header 操作 当 Envoy 在进行请求流量转发的时候， 还可以对消息 (request/response) 的 Header 进行操作。 set : 如果不存在， 则 创建 header， 如果存在， 则 覆盖 header 1 2 3 4 5 6 7 spec: http: - headers: request: set: key1: value1 key2: value2 add : 如果不存在， 则 新增； 如果村子啊， 则 追加 1 2 3 4 5 6 7 spec: http: - headers: request: add: key1: value1 key2: value2 remove: 如果存在， 则 删除 header; 不存在, 则 忽略 1 2 3 4 5 6 7 spec:</description></item><item><title>《istio-in-action 系列》 17. Gateway 支持 https 访问 - 标准模式</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/17-gw-https-support-standard/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/17-gw-https-support-standard/</guid><description>Gateway 支持 https 访问 - 标准模式 https://istio.io/latest/docs/reference/config/networking/gateway/#ServerTLSSettings credentialName: The secret (of type generic) should contain the following keys and values: key: &amp;lt;privateKey&amp;gt; and cert: &amp;lt;serverCert&amp;gt; 创建证书 k8s secret 在 标准模式 下， 必须使用 key 作为私钥文件名， cert 作为证书文件名。 证书文件需要 保持 与 istio-ingressgateway 服务在 相同 的命名空间。 因此证书文件的创建命令如下 1 2 3 4 kubectl create secret generic wild-tangx-in \ --from-file=key=./certificates/_.tangx.in.key \ --from-file=cert=./certificates/_.tangx.in.crt \ -n istio-system 其中 wild-tangx-in: 是 secret name。 之后 istio gateway 需要使用 ./certificates/_.tangx.in.key(crt) 是证书私钥/</description></item><item><title>《istio-in-action 系列》 18. 使用 DestionationRule 流量控制策略 - 简单负载均衡</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/18-dr-simple-loadbalance/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/18-dr-simple-loadbalance/</guid><description>使用 DestionationRule 流量控制策略 - 简单负载均衡 简单负载均衡 策略， 官方指定名称。 ROUND_ROBIN: 轮训策略， 默认。 LEAST_CONN: 最小连接数。 随机 选择 两个健康 后端， 通过 O(1) 算法选择连接数最少的后端。 RANDOM: 随机选择了一个 健康 后端。 如果 没有配置健康检查策略， 随机策略比轮训更好。 PASSTHROUGH: 此选项会将连接转发到调用者请求的原始 IP 地址，而不进行任何</description></item><item><title>《istio-in-action 系列》 3. 使用 istio Gateway 允许外部访问</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/03-vs-and-ingress/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/03-vs-and-ingress/</guid><description>isti VirtualService 和 k8s Ingress 可以简单的认为 Ingress 是 k8s 中提出的流量入口转发的一个 标准定义规范（只是认为）。 怎么实现， 需要根据不同的 IngressController 的逻辑。 VirtualService 的部分功能就承担了 Ingress 的这一功能。 1. Ingress 与 VirtualService 的定义 k8s Ingress 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: creationTimestamp: null name: simple spec: rules: - host: foo.com # 访问的域名 http: paths: - backend: service: name: svc1 # 后端服务名称 port: number: 80</description></item><item><title>《istio-in-action 系列》 4. 使用 istio Gateway 允许外部访问</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/04-gateway/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/04-gateway/</guid><description>使用 istio Gateway 允许外部访问 仅仅是简单的创建了 VirtualService 是不能实现集群外部的访问的。 在 Istio 中， 还有一个 Gateway 的概念。 顾名思义， Gateway 就是大门保安， 只允许具有特定特征的流量通过。 1.1. 创建 Gateway 先来创建一个 Gateway 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 --- # https://istio.io/latest/docs/reference/config/networking/gateway/ apiVersion: networking.istio.io/v1alpha3 kind: Gateway metadata: name: istio-tangx-in namespace: myistio spec: selector: istio: ingressgateway # 选择 ingressgateway, 省略则兼容所有 servers: - port: number: 80 name: http protocol:</description></item><item><title>《istio-in-action 系列》 5. VirtualService 使用路径重写</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/05-vs-http-rewrite-by-uri/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/05-vs-http-rewrite-by-uri/</guid><description>《istio-in-action 系列》 5. VirtualService 使用路径重写 有了 VirtualService 的路径重写功能后， 就更符合 Ingress 的标准定义了。 但 VirtualService 不仅仅如此， 路径重写包含了三种方式 prefix: 前缀匹配。 只要 uri 路径的 前段 匹配则转发。 后端 自动补齐。 exact: 精确匹配。 只有 uri 全部 匹配才转发， 并且只能转发某一个固定地址。 精确匹配 regex: 正则匹配。 只有</description></item><item><title>《istio-in-action 系列》 6. 使用 DestinationRule Subset 进行路由分组(版本控制)</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/06-dr-subset/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/06-dr-subset/</guid><description>使用 DestinationRule Subset 进行路由分组(版本控制) 当一个程序并行发布多个版本的时候， 如 prod-v1 / prod-v2 1 2 3 4 5 kgd NAME READY UP-TO-DATE AVAILABLE AGE toolbox 1/1 1 1 3d22h prod-v1 1/1 1 1 16m prod-v2 1/1 1 1 16m // 两个版本的测试结果， 仅定义为 version 不一致 { &amp;#34;data&amp;#34;: { &amp;#34;Name&amp;#34;: &amp;#34;istio in action&amp;#34;, &amp;#34;Price&amp;#34;: 300, &amp;#34;Reviews&amp;#34;: null }, &amp;#34;version&amp;#34;: &amp;#34;v2.0.0&amp;#34; // &amp;#34;version&amp;#34;: &amp;#34;v1.0.0&amp;#34; } k8s Service 依旧实现最根本的 服务级别的 Selector。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>《istio-in-action 系列》 8. VirtualService 使用 header 重写路由</title><link>https://tangx.in/posts/books/istio-in-action/chapter02/08-vs-http-rewrite-by-header/</link><pubDate>Thu, 27 Jan 2022 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/books/istio-in-action/chapter02/08-vs-http-rewrite-by-header/</guid><description>VirtualService 使用 header 重写路由 在 istio 中， 除了 path 之外还可以使用 Header 进行路由规则管理。 为了更好的展示 header 路由效果， 这里配合使用了 uri 的精确匹配模式。 实现之后， 只能访问地址 http://istio.tangx.in/ ， 其他均为 404。 具体哪个服务应答， 完全根据 header 匹配选择。 效果如下: 使用 Header 匹配有几个必要条件 Header 的 key 只能包含 小写字母 和 连字符 -。 从实际测试</description></item></channel></rss>