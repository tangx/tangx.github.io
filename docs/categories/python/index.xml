<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on 老麦的书房</title><link>https://typonotes.com/categories/python/</link><description>Recent content in python on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 29 Nov 2024 19:21:45 +0800</lastBuildDate><atom:link href="https://typonotes.com/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python: 关于 Package 和 Module 快速入门</title><link>https://typonotes.com/posts/2024/11/29/python-package-module-quick-start/</link><pubDate>Fri, 29 Nov 2024 19:21:45 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/29/python-package-module-quick-start/</guid><description>Python: 关于 Package 和 Module 快速入门 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/29/python-package-module-quick-start/ 什么是 包 (Package) 如果一个目录中有 __init__.py ， 那这个目录就是 包 Package 什么是 模块 (Module) xxx.py 文件就是模块 怎么引用自定义包 把 包路径 使用 sys.path.append(xxx) 添加后， 就可以使用 1 2 3 4 5 6 7 8 9 10 11 # import {Package} from x.Package import Module print(f&amp;#34;Module.Attribute&amp;#34;) from x.Package.Module import Attribute print(f&amp;#34;{Attribute}&amp;#34;) # 别名 from x.Package.Module import Attribute as attr print(f&amp;#34;{attr}&amp;#34;) 不能使用 连续的 . 结构 1 2 import x.Package</description></item><item><title>Python 类型提示: Typed Dict</title><link>https://typonotes.com/posts/2024/11/23/python-hint-typed-dict/</link><pubDate>Sat, 23 Nov 2024 17:50:36 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/23/python-hint-typed-dict/</guid><description>Python 类型提示: Typed Dict 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/23/python-hint-typed-dict/ 在 Golang 中， 通过 json/yaml 解析对象后， 可以通过提示器快速获取字段 但是 Python 作为动态语言， 这方便的功能就比较弱。 但好在 Python 提供了 TypedDict 进行提示。 typing 是标准库， 不用安装。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # TypedDict from typing import TypedDict class Movie(TypedDict): name: str year: int movie: Movie = { &amp;#34;name&amp;#34;: &amp;#34;Groot&amp;#34;, &amp;#34;year&amp;#34;:</description></item><item><title>Python pip 源配置</title><link>https://typonotes.com/posts/2024/11/22/python-pip-conf/</link><pubDate>Fri, 22 Nov 2024 23:33:29 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/22/python-pip-conf/</guid><description>Python pip 源配置 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/22/python-pip-conf/ 使用阿里云的 pip 源。 支持 https 和 http 1 2 3 4 5 6 7 8 9 mkdir ~/.pip cat &amp;gt; ~/.pip/pip.conf &amp;lt;&amp;lt; EOF [global] trusted-host=mirrors.aliyun.com index-url=https://mirrors.aliyun.com/pypi/simple/ EOF mac + venv 在 mac + venv 下， 路径 ~/.pip/pip.conf 中的配置并不生效。 而真正生效的路径是 ~/.config/pip/pip.conf</description></item><item><title>Python Keywords: with</title><link>https://typonotes.com/posts/2024/11/22/python-keywords-with/</link><pubDate>Fri, 22 Nov 2024 16:28:41 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/22/python-keywords-with/</guid><description>Python Keywords: with 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/22/python-keywords-with/ with 是 python 中的一个关键字。 一种更简单的方式实现 try...catch。 例如， 打开文件后获得文件句柄f， 无论执行是否正常都需要关闭句柄。 1 2 3 4 5 6 try: f = open(&amp;#34;file.txt&amp;#34;, &amp;#34;r&amp;#34;) f.write(&amp;#34;Hello, World!&amp;#34;) finally: f.close() 但是使用 with 关键字， 就可以简单的写成如下 1 2 with open(&amp;#34;file.txt&amp;#34;, &amp;#34;w&amp;#34;) as f: f.write(&amp;#34;Hello, World!&amp;#34;) with...as 的类实现: ContextManager with</description></item><item><title>Python 配置解析: PyYaml</title><link>https://typonotes.com/posts/2024/11/21/python-config-pyyaml/</link><pubDate>Thu, 21 Nov 2024 12:55:09 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/21/python-config-pyyaml/</guid><description>Python 配置解析: PyYaml 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/21/python-config-pyyaml/ pyyaml 是 python 中管理 yaml 依赖库。 1 pip install pyyaml 虽然名字叫 pyyaml, 但是在 import 的时候却使用的是 yaml 1 import yaml load 解析 load 支持解析 字符串 文件, 不用预先读取成字符串再解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import yaml ### 字符串 info = &amp;#34;&amp;#34;&amp;#34; name: tangx age: 20 address: contry: China city: Beijing &amp;#34;&amp;#34;&amp;#34; cfg = yaml.safe_load(info) print(cfg) ### 文件 with open(&amp;#34;config.yaml&amp;#34;,</description></item><item><title>Python 日志库: Loguru</title><link>https://typonotes.com/posts/2024/11/21/python-loguru/</link><pubDate>Thu, 21 Nov 2024 11:30:43 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/21/python-loguru/</guid><description>Python 日志库: Loguru 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/21/python-loguru/ loguru 是一款常用的 python 日志库。 https://loguru.readthedocs.io/en/stable/overview.html 注意: loguru 没有 fatal， 而是 critical 安装 1 pip install loguru 基础使用 1 2 3 4 5 6 7 8 9 10 from loguru import logging as log ## 设置格式 logger.add(&amp;#34;file.log&amp;#34;, format=&amp;#34;{time} {level} {message}&amp;#34;, level=&amp;#34;INFO&amp;#34;) ## 设置 level logger.level(&amp;#34;ERROR&amp;#34;) # 注意， 不支持小写 logger.info(&amp;#34;Hello, World!&amp;#34;) logger.critical(&amp;#34;This is a critical message!&amp;#34;) 装饰器用法 1 2 3 4 @logger.catch def test_logger(x: int): log.info(&amp;#34;This is a test logger function!&amp;#34;) return 10 / x 绑定额外参</description></item><item><title>Python 最小化 Requirements</title><link>https://typonotes.com/posts/2024/11/21/python-minimum-requirements/</link><pubDate>Thu, 21 Nov 2024 10:41:22 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/21/python-minimum-requirements/</guid><description>Python 最小化 Requirements 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/21/python-minimum-requirements/ 使用 pip freeze 会把当前环境中的所有依赖包都放到 requirements.txt 中。 使用 pigar 最小化 Requirements 安装 1 pip install pigar 生成 1 pigar generate 使用 pipreqs 最小化 Requirements 安装 1 pip install pipreqs 生成 1 2 3 4 5 6 # 强制覆盖 requiremetns.txt pipreqs --encoding utf-8 --ignore .venv --force # 输出到 os.stdout pipreqs --encoding utf-8 --ignore .venv --print</description></item></channel></rss>