<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>typescript on 老麦的书房</title><link>https://tangx.in/tags/typescript/</link><description>Recent content in typescript on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 29 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tangx.in/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>typescript 将 json 序列化为 querystring 格式</title><link>https://tangx.in/posts/2021/09/29/typescript-convert-json-to-querystring/</link><pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/29/typescript-convert-json-to-querystring/</guid><description>typescript 将 json 序列化为 querystring 格式 使用 typescript 时， 需要同时安装 @types/qs 和 qs 1 yarn add @types/qs qs demo 1 2 3 4 5 6 7 8 9 const params = qs.stringify({ namespace: namespace, replicas: replicas, }) const u = `/deployments/${name}/replicas?${params}` console.log(&amp;#34;Uuuuu::::&amp;#34;, u); // Uuuuu:::: /deployments/failed-nginx/replicas?namespace=default&amp;amp;replicas=3</description></item><item><title>axios get 请求携带 body 数据</title><link>https://tangx.in/posts/2021/09/07/typescript-axios-get-request-with-body-data/</link><pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/07/typescript-axios-get-request-with-body-data/</guid><description>axios get 请求携带 json body 数据 在 http 标准协议中， GET 请求 本身是可以携带 Body 数据 。 至于 GET 请求携带的数据能不能被获取， 还是要看接受端 后端 是否处理。 在 gin-gonic/gin 框架中， GET 请求默认就不会处理 body 中的数据， 只能通过 query 表单数据传递。 然而不同的浏览器对于 URL 长度的限制也不同，一般是 1024 个字符， 1. 有些时候需要携带的数据可能超</description></item><item><title>typescript vue3 项目容器化实战</title><link>https://tangx.in/posts/2021/09/01/typescript-for-of-interface-and-assert-keyof-type/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/01/typescript-for-of-interface-and-assert-keyof-type/</guid><description>typescript vue3 项目容器化实战 在前端容器化的时候， 有一个绕不开的问题： 容器返回的后端地址应该怎么设置。 静态编译到所有文件中， 肯定是不可取的， 总不能后端变更一个访问域名，前端都要重新构建一次镜像吧？ 由于 js (typescript 编译后 ) 实际是运行在 用户的浏览器上， 所以也不能像后端一样读取环境变量。 所以， 通过 html &amp;lt;meta&amp;gt; 标签</description></item><item><title>typescript 中使用 @ 路径别名</title><link>https://tangx.in/posts/2021/09/01/typescript-use-alias-path/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/01/typescript-use-alias-path/</guid><description>typescript 中使用 @ 路径别名 使用路径别名 @/some/path/index.ts 可以很简单的表示一个文件的绝对路径（其实是相对于 @ 的相对路径） 安装 @types/node 1 yarn add @types/node 配置 tsconfig.json , 一下是基于 vite2 项目配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { &amp;#34;compilerOptions&amp;#34;: { // ... , &amp;#34;types&amp;#34;: [ &amp;#34;node&amp;#34; ], // https://github.com/vitejs/vite/issues/279 &amp;#34;paths&amp;#34;: { &amp;#34;@/*&amp;#34;: [ &amp;#34;./src/*&amp;#34;, ] } }, // ... } 就可以在 ts 文件中使用 @ 别名引入了。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>typescript 中的 const 断言</title><link>https://tangx.in/posts/2021/08/26/typescript-const-assertions/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/08/26/typescript-const-assertions/</guid><description>typescript 中的 const assertions const assertions - TypeScript 3.4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // vue3 const dnsProviders = { &amp;#34;aliyun.com&amp;#34;: &amp;#34;alidns&amp;#34;, &amp;#34;tencent.com&amp;#34;: &amp;#34;dnspod&amp;#34; } let data = reactive({ rootDomain: &amp;#34;aliyun.com&amp;#34; as const }) let dnsProvider = computed( () =&amp;gt; { return dnsProviders[data.rootDomain] } ) 这个时候会， 提示 7053 错误， data.rootDomain 具有 any type, 不能被用作 key。 解决这个问题使用， 需要使用 typescript 中 const assertion 类型推断。 const assertion 类型推断。 字面量类型推断: 其类型为字面值类型。 例如这里的 hello 的类型是</description></item><item><title>typescript 中的时间处理</title><link>https://tangx.in/posts/2021/08/25/typescript-time-operation/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/08/25/typescript-time-operation/</guid><description>typescript 中的时间处理 在 typescript/ javasctipt 中， 时间 是一个 构造 函数， 需要通过 const dt = new Date(xxx) 进行初始化创建时间对象。 创建时间对象 1 2 3 4 5 6 7 8 9 10 // 获取当前时间对象 const now = new Date() // 将字符串时间转换为 Date 时间对象 const timeStr = &amp;#39;2021-08-23T02:42:17Z&amp;#39; const dt = new Date(timeStr) // 根据数字创建时间 const dt2 = new Date(Date.UTC(2006, 0, 2, 15, 4, 5)); console.log(&amp;#34;event:::&amp;#34;, dt2); 时间操作 获取时间对象的属性值 通过 getXXX() 方法， 可以</description></item></channel></rss>