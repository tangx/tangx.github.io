<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on 一壶酒一溪云</title><link>https://tangx.in/tags/linux/</link><description>Recent content in linux on 一壶酒一溪云</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 04 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tangx.in/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>linux 创建本地源</title><link>https://tangx.in/posts/2020/04/04/local-repo/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/04/04/local-repo/</guid><description>linux 创建本地源 ubuntu 创建 local repo 将包放在 debs 目录下, 使用如下命令创建 私有仓库索引 1 2 3 cd /data/repo dpkg-scanpackages debs/ /dev/null |gzip &amp;gt; debs/Packages.gz centos 创建 local repo 将包放在 /data/repo/centos7 目录下, 使用如下命令创建 私有仓库索引 1 2 3 cd /data/repo/centos7 createrepo .</description></item><item><title>TCP keepalive 探活机制</title><link>https://tangx.in/posts/2019/04/19/tcp-keepalive/</link><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2019/04/19/tcp-keepalive/</guid><description>TCP keepalive 探活机制 Content here 参考资料 tcp keepalive howto tcp 协议 syn 攻击 为什么基于TCP的应用需要心跳包</description></item><item><title>Linux 下的几个命令行下载工具</title><link>https://tangx.in/posts/2017/11/05/cli-download-tools-for-linux/</link><pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/11/05/cli-download-tools-for-linux/</guid><description>Linux 下的几个命令行下载工具 linux 下最常用的 wget 是单线程的。虽然好用，但不够用。例如在下载阿里云的数据库备份文件，单线程最多能达到 10Mbps，即使是走内网。 因此，有必要换一下其他的。 axel https://github.com/axel-download-accelerator/axel axel 相较 wget 最大的优点就是支持多线程。 在 ubuntu 16.04 LST 上安装非常简单，已经加入了官方源。 CentOS 系列的话，就去 pkgs.org 上找到对</description></item><item><title>使用 sshpass 传递密码</title><link>https://tangx.in/posts/2017/11/05/sshpass/</link><pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/11/05/sshpass/</guid><description>使用 sshpass 传递密码 使用 sshpass 给 ansible 传递密码 1 2 3 4 5 $ sshpass -p &amp;#39;xxxxxxxx&amp;#39; ansible -i dsgl_domantic.py all -m ping --limit=1x.x.x.x0 -u root --ask-pass 1x.x.x.x0 | SUCCESS =&amp;gt; { &amp;#34;changed&amp;#34;: false, &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34; } 将密码写入命令行中 1 sshpass -p &amp;#39;your_password_string&amp;#39; ssh 58.*.*.197 将密码写入变量中 1 2 export SSHPASS=&amp;#39;your_password_string&amp;#39; sshpass -e ssh 118.*.*.16 将密码写入文件中 1 2 3 echo &amp;#39;your_password_string&amp;#39; &amp;gt; sshpass.sec sshpass -f sshpass.sec ssh 118.*.*.16</description></item><item><title>LVS 基本信息介绍</title><link>https://tangx.in/posts/2017/09/02/lvs-thoery/</link><pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/09/02/lvs-thoery/</guid><description>LVS 介绍 本来想自己画图写介绍的，结果看了官网，里面的内容更详细更直接，所以就直接看 LVS 官网 中文 吧。 三种调度算法 NAT 模式: 网络地址转换 Network Address Translation TUN 模式: IP 隧道 IP Tunneling DR 模式: 直接路由 Direct Routing 更详细的介绍可以直接看官网 LVS集群中的IP负载均衡技术 这里简单的说一下三种模式的调度原理 NAT 模式 优点： RS 可以是</description></item><item><title>iptables 基础知识和基本用法</title><link>https://tangx.in/posts/2017/08/31/iptables-basic-theory-and-useage/</link><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/08/31/iptables-basic-theory-and-useage/</guid><description>iptables 基础知识和基本用法 iptables传输数据包的过程 当一个数据包进入网卡时，它首先进入PREROUTING链，内核根据数据包目的IP判断是否需要转送出去。 如果数据包就是进入本机的，它就会沿着图向下移动，到达INPUT链。数据包到了INPUT链后，任何进程都会收到它。本机上运行的程</description></item><item><title>LVM 磁盘管理与在线扩容</title><link>https://tangx.in/posts/2017/08/25/lvm-management-and-online-extend/</link><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/08/25/lvm-management-and-online-extend/</guid><description>LVM 磁盘管理与在线扩容 不上 LVM 的服务器都是耍流氓 在线扩容 通过 LVM 扩容的时候， 被扩容的逻辑卷 不需要重新格式化 被扩容的逻辑卷 不需要被 umount 被扩容的逻辑卷上的业务 不受影响 在执行 resize2fs 或 xfs_growfs 的时候，会有一定等待时间，属于正常显现。 虽然扩容还是很安全的，不过，有条件的话，最好还是进行必要的备份 扩容步骤 创建</description></item><item><title>为 linux 系统软件配置代理</title><link>https://tangx.in/posts/2017/07/12/proxy-for-linux-software/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/07/12/proxy-for-linux-software/</guid><description>为 linux系统软件配置 socks 和 http 代理 use sslocal to setup a socks5 proxy 1 2 3 4 pip install shadowsocks sslocal --help CENTOS 6 install privoxy https://superuser.com/questions/452197/how-to-install-privoxy-on-centos-6 1 2 3 4 5 6 7 8 9 10 11 12 13 # These commands are more easier and manageable wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh epel-release-6-8.noarch.rpm yum install privoxy -y # In future if you want to update yum update privoxy -y # Ref: http://pkgs.org/centos-6/epel-x86_64/privoxy-3.0.21-3.el6.x86_64.rpm.html # shareimprove this answer transfer protocol from socks to http via privoxy https://wiki.archlinux.org/index.php/Shadowsocks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) https://blog.phpgao.com/privoxy-shadowsocks.html 方法二： 1.直接指定Chromium走socks代理似乎不能远程dns解析，这未必是用</description></item><item><title>使用 FIO 测试磁盘 IOPS 性能</title><link>https://tangx.in/posts/2017/03/06/%E7%A3%81%E7%9B%98IOPS%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/03/06/%E7%A3%81%E7%9B%98IOPS%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid><description>使用 FIO 测试磁盘 IOPS 性能 磁盘IOPS测试 linux 使用 FIO 测试 FIO是测试IOPS的非常好的工具，用来对硬件进行压力测试和验证，支持13种不同的I/O引擎，包括:sync,mmap, libaio, posixaio, SG v3, splice, null, network, syslet, guasi, solarisaio 等等。 FIO 安装 1 2 3 4 5 6 7 8 9 10 # centos6 可以通过 yum 安装 sudo yum -y install fio # 编译安装 wget http://brick.kernel.dk/snaps/fio-2.0.7.tar.gz yum install libaio-devel tar -zxvf fio-2.0.7.tar.gz cd fio-2.0.7 make</description></item><item><title>cron 定时任务小技巧 进程锁与超时</title><link>https://tangx.in/posts/2016/12/16/cron-tips-lock-timeout/</link><pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2016/12/16/cron-tips-lock-timeout/</guid><description>cron 定时任务小技巧 进程锁与超时 如果本文的内容仅限于此类小菜，那么未免有些太对不起各位看官，下面上一道硬菜：设置一个 PHP 脚本，每分钟执行一次，怎么搞？听起来这分明就是一道送分题啊： 1 * * * * * /path/to/php /path/to/file 让我们设想如下情况：假如上一分钟的 A 请求还没退出，下一分钟的 B 请求也启动了，就会导致出现 AB</description></item></channel></rss>