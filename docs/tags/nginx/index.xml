<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on 老麦的书房</title><link>https://typonotes.com/tags/nginx/</link><description>Recent content in nginx on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 11 Jul 2023 14:58:26 +0800</lastBuildDate><atom:link href="https://typonotes.com/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker 制作容器镜像的时候， 一定不能 All In One 吗?</title><link>https://typonotes.com/posts/2023/07/11/docker-image-all-in-one-policy/</link><pubDate>Tue, 11 Jul 2023 14:58:26 +0800</pubDate><guid>https://typonotes.com/posts/2023/07/11/docker-image-all-in-one-policy/</guid><description>Docker 制作容器镜像的时候， 一定不能 All In One 吗? 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2023/07/11/docker-image-all-in-one-policy/ All in One 指的是把所有依赖都制作到同一个镜像中， 比如 app, mysql, redis。 一般来说 不要， 尽量保证一个镜像一个 应用。 解耦合。 可以这么理解 容器重启相当于机器重启 ， 也就是 容器内的服务全部重启。 因此做镜像的时候应该尽</description></item><item><title>Nginx 添加 Opentelemetry 支持</title><link>https://typonotes.com/posts/2023/05/09/nginx-add-opentelemetry-support/</link><pubDate>Tue, 09 May 2023 17:01:22 +0800</pubDate><guid>https://typonotes.com/posts/2023/05/09/nginx-add-opentelemetry-support/</guid><description>Nginx 添加 Opentelemetry 支持 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/05/09/nginx-add-opentelemetry-support/ 关于 Nginx 添加 OpenTelemetry 支持， 官方有两种推荐： 在 Nginx Ingress Controller 第三方插件 OpenTelemetry 推荐 otel_ngx_module.so 在 OpenTelemetry 官网 中， 推荐 opentelemetry-webserver-sdk-x64-linux， 这是一种扩展性更强和跟踪功能</description></item><item><title>Nginx 和 Nginx-Ingress-Controller 配置 JSON 日志格式</title><link>https://typonotes.com/posts/2023/05/08/nginx-log-json-format/</link><pubDate>Mon, 08 May 2023 09:34:49 +0800</pubDate><guid>https://typonotes.com/posts/2023/05/08/nginx-log-json-format/</guid><description>Nginx 和 Nginx-Ingress-Controller 配置 JSON 日志格式 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/05/08/nginx-log-format/ Nginx 注意: 列表中的字段仅仅是 Demo ，根据自己实际需求进行增删。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { &amp;#34;time&amp;#34;: &amp;#34;$time_iso8601&amp;#34;, &amp;#34;remote_addr&amp;#34;: &amp;#34;$remote_addr&amp;#34;, &amp;#34;remote_user&amp;#34;: &amp;#34;$remote_user&amp;#34;, &amp;#34;request_method&amp;#34;: &amp;#34;$request_method&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;$host&amp;#34;, &amp;#34;request_uri&amp;#34;: &amp;#34;$request_uri&amp;#34;, &amp;#34;status&amp;#34;: &amp;#34;$status&amp;#34;, &amp;#34;request_time&amp;#34;: &amp;#34;$request_time&amp;#34;, &amp;#34;cost&amp;#34;: &amp;#34;$request_time&amp;#34;, &amp;#34;body_bytes_sent&amp;#34;: &amp;#34;$body_bytes_sent&amp;#34;, &amp;#34;http_referer&amp;#34;: &amp;#34;$http_referer&amp;#34;, &amp;#34;http_user_agent&amp;#34;: &amp;#34;$http_user_agent&amp;#34;, &amp;#34;request_length&amp;#34;: &amp;#34;$request_length&amp;#34;, &amp;#34;upstream_addr&amp;#34;: &amp;#34;$upstream_addr&amp;#34;, &amp;#34;upstream_response_length&amp;#34;: &amp;#34;$upstream_response_length&amp;#34;, &amp;#34;upstream_response_time&amp;#34;: &amp;#34;$upstream_response_time&amp;#34;, &amp;#34;upstream_status&amp;#34;: &amp;#34;$upstream_status&amp;#34;, &amp;#34;opentelemetry_context_traceparent&amp;#34;:&amp;#34;$opentelemetry_context_traceparent&amp;#34;,</description></item><item><title>nginx 实现首页不缓存</title><link>https://typonotes.com/posts/2021/11/25/index-no-cache-in-nginx/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/11/25/index-no-cache-in-nginx/</guid><description>nginx 实现首页不缓存 前端上 CDN 加速， 后端上 DCDN， 加速网站访问速度。 前端代码编译的时候， 可以加上 hash 值使编译后的产物名字随机， 可以在不刷新 CDN 资源 的情况下， 保障页面展示最新。 虽然对多了一点回源， 但减少了人工操作。 但是 首页不能被缓存， 否则于事无补。 对于首页的缓存设置， 有一点注意事项， 其一 ，</description></item><item><title>使用 lego 申请 let's encrypt 证书</title><link>https://typonotes.com/posts/2020/01/16/lego-lects-encrypt/</link><pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2020/01/16/lego-lects-encrypt/</guid><description>使用 lego 申请 let&amp;rsquo;s encrypt 证书 lego 是用来申请 let's encrypt 免费证书的, 现在支持多种验证方式。 以下是使用 alidns 解析验证。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #!/bin/bash # # lego-letsencrypt.sh # cd $(dirname $0) which lego || { lego_ver=v3.7.0 wget -c https://github.com/go-acme/lego/releases/download/${lego_ver}/lego_${lego_ver}_linux_amd64.tar.gz -o lego.tar.gz tar xf lego.tar.gz cp -a lego /usr/local/bin/lego } DomainList=&amp;#34;*.example.com,*.example.org&amp;#34; EMAIL=&amp;#34;your@email.com&amp;#34; export ALICLOUD_ACCESS_KEY=LTAxxxxxx export ALICLOUD_SECRET_KEY=yyyyyyyyyyyyyyyyy Domains=&amp;#34;&amp;#34; for domain in ${DOMAINs//,/ } do { Domains=&amp;#34;${Domains} --domain=${domain}&amp;#34; }</description></item><item><title>k8s nginx ingress 添加 x-forwarded</title><link>https://typonotes.com/posts/2019/08/10/nginx-ingress-x-forward/</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2019/08/10/nginx-ingress-x-forward/</guid><description>ingress 配置 for-forward-for The client IP address will be set based on the use of PROXY protocol or from the X-Forwarded-For header value when use-forwarded-headers is enabled. https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#use-forwarded-headers https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#forwarded-for-header 1 2 3 4 5 6 7 8 apiVersion: extensions/v1beta1 kind: Ingress metadata: name: srv-bff-op-center annotations: nginx.ingress.kubernetes.io/forwarded-for-header: &amp;#34;X-Forwarded-For&amp;#34; kubernetes.io/ingress.class: &amp;#34;nginx&amp;#34;</description></item><item><title>关于 nginx uri 的截取</title><link>https://typonotes.com/posts/2019/04/23/nginx-uri/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2019/04/23/nginx-uri/</guid><description>关于 uri 的截取 location 中的 root 和 alias root 指令只是将搜索的根设置为 root 设定的目录，即不会截断 uri，而是使用原始 uri 跳转该目录下查找文件 alias 指令则会截断匹配的 uri，然后使用 alias 设定的路径加上剩余的 uri 作为子路径进行查找 示例 1： root #------------目录结构---------- /www/x1/index.html /www/x2/index.html #--------</description></item><item><title>nginx 子目录路径配置 root 与 alias 的区别</title><link>https://typonotes.com/posts/2016/11/18/nginx-location-root-alias/</link><pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2016/11/18/nginx-location-root-alias/</guid><description>nginx 子目录路径配置 root 与 alias 的区别 最近在nginx上部署日志分析工具awstats时，在配置awstats分析结果可供网页浏览这步时，分析结果页面访问总是404.后来查阅了一些资料，发现是root和alias的用法区别没搞懂导致的，这里特地将这两者区别详尽道来，供大家学习参考。 Ngin</description></item></channel></rss>