<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>yaml on 老麦的书房</title><link>https://typonotes.com/tags/yaml/</link><description>Recent content in yaml on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 21 Nov 2024 12:55:09 +0800</lastBuildDate><atom:link href="https://typonotes.com/tags/yaml/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 配置解析: PyYaml</title><link>https://typonotes.com/posts/2024/11/21/python-config-pyyaml/</link><pubDate>Thu, 21 Nov 2024 12:55:09 +0800</pubDate><guid>https://typonotes.com/posts/2024/11/21/python-config-pyyaml/</guid><description>Python 配置解析: PyYaml 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/11/21/python-config-pyyaml/ pyyaml 是 python 中管理 yaml 依赖库。 1 pip install pyyaml 虽然名字叫 pyyaml, 但是在 import 的时候却使用的是 yaml 1 import yaml load 解析 load 支持解析 字符串 文件, 不用预先读取成字符串再解析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import yaml ### 字符串 info = &amp;#34;&amp;#34;&amp;#34; name: tangx age: 20 address: contry: China city: Beijing &amp;#34;&amp;#34;&amp;#34; cfg = yaml.safe_load(info) print(cfg) ### 文件 with open(&amp;#34;config.yaml&amp;#34;,</description></item><item><title>Golang 使用 inline 处理 JSON/YAML 内联字段的 2 点注意事项</title><link>https://typonotes.com/posts/2024/01/09/golang-tag-inline/</link><pubDate>Tue, 09 Jan 2024 11:15:10 +0800</pubDate><guid>https://typonotes.com/posts/2024/01/09/golang-tag-inline/</guid><description>Golang 使用 inline 处理 JSON/YAML 内联字段的 2 点注意事项 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/01/09/golang-tag-inline/ 这是一片错误笔记， 没什么高大上的东西。 简单记录一下在 Go 中使用 json 和 yaml 在解析字符串的时候没有太注意的一个点。 以 Json 为例， 通常我们在 struct结构 与 Json结构 的时候是 一一对应 的。 以下几种名字都是我自己取的，</description></item></channel></rss>