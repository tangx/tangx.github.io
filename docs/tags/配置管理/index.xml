<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置管理 on 老麦的书房</title><link>https://maicode.cc/tags/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</link><description>Recent content in 配置管理 on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 27 Jan 2023 09:08:25 +0800</lastBuildDate><atom:link href="https://maicode.cc/tags/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>自从 Golang 用了 envutils 管理配置， 运维同事再也没过来闹少变量了</title><link>https://maicode.cc/posts/2023/01/27/golang-envutils-config/</link><pubDate>Fri, 27 Jan 2023 09:08:25 +0800</pubDate><guid>https://maicode.cc/posts/2023/01/27/golang-envutils-config/</guid><description>自从 Golang 用了 envutils 管理配置， 运维同事再也没过来闹少变量了 原文链接: https://tangx.in/posts/2023/01/27/golang-envutils-config/ 用习惯了 struct 之后， 我想所有东西都通过 struct 管理。 学习了反射之后， 我总要找点事情做来练习。 于是我整合了 Golang环境变量操作 和 Golang反射， 以及解决了我认为的其他一些配置管理的痛点， 便有了这个项目。 一篇文章告诉你 golang 环境变</description></item><item><title>一篇文章告诉你 golang 环境变量的所有基础操作</title><link>https://maicode.cc/posts/2021/09/06/golang-os-env-operation/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://maicode.cc/posts/2021/09/06/golang-os-env-operation/</guid><description>一篇文章告诉你 golang 环境变量的所有基础操作 原文链接： https://tangx.in/posts/2021/09/06/golang-os-env-operation/ golang 中的环境变量操作都在 os 包下面， 只有很少的几个方法， 而且字面意思也很明确。 所有环境变量操作对象都是 字符串string ， 因此对于 int， bool 类型需要自己实现转换。 golang 程序执行的时候， 是在 linux 系统中 fork 的一种子进程中 golang程序 在 复制了开</description></item></channel></rss>