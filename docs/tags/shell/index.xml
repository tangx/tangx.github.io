<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on 老麦的书房</title><link>https://tangx.in/tags/shell/</link><description>Recent content in shell on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 30 Dec 2022 22:50:10 +0800</lastBuildDate><atom:link href="https://tangx.in/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 工具命令(02): shfmt 格式化 shell 脚本， vscode 神插件</title><link>https://tangx.in/posts/2022/12/30/vscode-shfmt/</link><pubDate>Fri, 30 Dec 2022 22:50:10 +0800</pubDate><guid>https://tangx.in/posts/2022/12/30/vscode-shfmt/</guid><description>Linux 工具命令(02): shfmt 格式化 shell 脚本， vscode 神插件 如果你用 Linux， 那你一定会遇到各种各样的 shell script（下称 script) 可惜的是， script 并没有一个 强制 约束的格式。 对于分支控制语句， 都有自己的关键字。 条件语句: if (...) then ... else ... fi 循环语句: for ... do ... done 等。 因此 是否使用 {statement} 或者 缩进 并不影响。 当分支语句多，且</description></item><item><title>shell 模拟多线程处理</title><link>https://tangx.in/posts/2016/11/29/shell-thread-usage/</link><pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2016/11/29/shell-thread-usage/</guid><description>shell 模拟多线程处理 shell并发的本质就是将代码块放入后台运行 并发数量控制的本质是通过读取管道等待保证后台运行代码块的数量 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!/bin/sh # # Author: uyinn # mailto: uyinn@live.com # datetime: 2014/04/28 # # # 创建管道 fifofile=/tmp/my.fifo mkfifo $fifofile exec 6&amp;lt;&amp;gt; $fifofile # @1 rm -f $fifofile # 实现并发进程数(7个</description></item><item><title>dokuwiki语法转markdown语法</title><link>https://tangx.in/posts/2016/11/04/dokuwiki2markdown/</link><pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2016/11/04/dokuwiki2markdown/</guid><description>亚马逊的免费网站要到期了。回顾了一下，这一年根本没有写什么东西，网站也基本没人访问。EC2除了搭建了一个SS楼梯之外也没有其他的作用。因此也没有继续折腾。 之前的doku经过几次插件折腾，发现创建文章的初始状态完全靠doku系统生成的缓存记录。之前本来打算把网站图片放到七牛这类空间</description></item></channel></rss>