<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on 老麦的书房</title><link>https://tangx.in/tags/docker/</link><description>Recent content in docker on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 21 Dec 2022 20:49:12 +0800</lastBuildDate><atom:link href="https://tangx.in/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Docker 容器中设置时区原来这么简单</title><link>https://tangx.in/posts/2022/12/21/docker-container-set-timezone/</link><pubDate>Wed, 21 Dec 2022 20:49:12 +0800</pubDate><guid>https://tangx.in/posts/2022/12/21/docker-container-set-timezone/</guid><description>Docker 容器中设置时区 在 linux 中， 通过 /etc/timezone 这个文件设置。 可以通过如下命令 持久化 时区设置， 其中 Asia/Shanghai 是我们需要的时区。 1 cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/timezone 容器中设置时区一直是独立于宿主机的。 可以通过挂载 /etc/timezone 的方式保持与宿主机时间一致。 1 docker run --rm -it -v /etc/timezone:/etc/timezone debian bash 这种方法只适合 本地的、简单的、临时的 容器。 容器有一个很重要的特点， 就是 一处</description></item><item><title>设置 docker server 网络代理</title><link>https://tangx.in/posts/2021/11/19/docker-server-network-proxy/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/11/19/docker-server-network-proxy/</guid><description>如果在国内使用docker, 大家一般会配置各种加速器, 我一般会配置阿里云或腾讯云，还算比较稳定。 /etc/docker/daemon.json 配置如下 1 2 3 4 5 6 7 8 { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://mirror.ccs.tencentyun.com&amp;#34;, &amp;#34;https://wlzfs4t4.mirror.aliyuncs.com&amp;#34; ], &amp;#34;bip&amp;#34;: &amp;#34;169.253.32.1/24&amp;#34;, &amp;#34;data-root&amp;#34;: &amp;#34;/data/docker/var/lib/docker&amp;#34; } 上述配置， 对 docker.io 的镜像加速效果很好， 但对 google 镜像的加速效果就很差了比如k8s相关的以gcr.io或quay.io开头的镜像地址。 这个时候可以</description></item><item><title>静态前端网站容器化</title><link>https://tangx.in/posts/2021/01/28/frontend-webapp-dockerize/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/01/28/frontend-webapp-dockerize/</guid><description>静态前端网站容器化 在容器启动的时候，将环境信息初始化到静态文件中，实现无状态镜像。 现实与需求 js 代码需要先从服务器下载到客户本地浏览器运行， 再与后端的服务器进行交付提供服务。 使用 nodejs 书写的网站， 通过 编译 产生静态文件， 放在 WEB容器 (例如 nginx/caddy ) 中即可对外提供服务。 容器本身需要无状态， 实现</description></item><item><title>学习 shell 反弹实现， 优化 Docker 基础镜像安全</title><link>https://tangx.in/posts/2020/12/03/shell-reflect2/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/12/03/shell-reflect2/</guid><description>学习 shell 反弹实现， 优化 Docker 基础镜像安全 天天都在说优化 Dockerfile。 到底怎么优化， 优化后的检验指标又是什么？ 没有考虑清楚行动目的， 隔空放炮， 必然徒劳无功。 笔者最近准备在 CI 上增加安全检测， 在分析案例样本的时候， 找到了比较流行的 struts2 漏洞， 其中 S2-052 远程代码执行漏洞 的利用方式就是在 POST 请求中</description></item><item><title>harbor 使用 s3v4 兼容模式对象存储保存数据</title><link>https://tangx.in/posts/2020/04/26/harbor-with-s3-compatible-storage/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/04/26/harbor-with-s3-compatible-storage/</guid><description>harbor使用 s3v4 兼容模式的对象存储数据 harbor v2.0.0 测试通过 qingcloud qingstor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # The default data volume data_volume: /data # Harbor Storage settings by default is using /data dir on local filesystem # Uncomment storage_service setting If you want to using external storage # storage_service: # # ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore # # of registry&amp;#39;s and chart repository&amp;#39;s containers. This is usually needed when the user hosts a internal storage with self signed certificate. # ca_bundle: #</description></item><item><title>dokcer daemon.json</title><link>https://tangx.in/posts/2019/04/24/docker-daemon-json/</link><pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2019/04/24/docker-daemon-json/</guid><description>docker daemon.json 配置文件 daemon.json 配置方式 Linux: /etc/docker/daemon.json Windows Server: C:\ProgramData\docker\config\daemon.json Docker for Mac / Docker for Windows: Click the Docker icon in the toolbar, select Preferences, then select Daemon. Click Advanced. daemon.json 配置 镜像加速器 1 2 3 4 5 6 7 8 9 // 配置一个 { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.docker-cn.com&amp;#34;] } // 配置多个 { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.docker-cn.com&amp;#34;,&amp;#34;https://docker.mirrors.ustc.edu.cn&amp;#34;] } 镜像加速器常用值： docker-cn 官方 : https://registry.docker-cn.com 中科大 : https://docker.mirrors.ustc.edu.cn 日志 1 2 3 4 { &amp;#34;debug&amp;#34;: true, &amp;#34;log-level&amp;#34;: &amp;#34;info&amp;#34; } log-level 的有效值包括: debug, info, warn, error, fatal 监控 Prometheus https://docs.docker.com/engine/admin/prometheus/#configure-docker 1 2 3 4 { &amp;#34;metrics-addr&amp;#34; : &amp;#34;127.0.0.1:9323&amp;#34;, &amp;#34;experimental&amp;#34; : true } 保持容器在线 https://docs.docker.com/engine/admin/live-restore/#enable-the-live-restore-option 当</description></item><item><title>使用 Dockerfile 构建镜像注意事项</title><link>https://tangx.in/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</guid><description>怎样去构建一个优质的Docker容器镜像 抛砖引玉 先说结论 以不变应万变 一个相对固定的 build 环境 善用 cache 构建 自己的基础镜像 精简为美 使用 .dockerignore 保持 context 干净 容器镜像环境清理 缓存清理 multi stage build 你需要的了解的参考资料 docker storage driver: https://docs.docker.com/storage/storagedriver/ dockerfile best practices: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ multi-stage: https://docs.docker.com/develop/develop-images/multistage-build/ 为什么要优化镜像 一个小镜像有什么好处: 分发更快，存储更少，加载更快。 镜像</description></item><item><title>K8S节点下载 gcr.io 原生镜像</title><link>https://tangx.in/posts/2018/11/09/k8s-pull-image-from-gcr.io/</link><pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2018/11/09/k8s-pull-image-from-gcr.io/</guid><description>K8S下载 gcr.io 原生镜像 在国内是不能直接下载 gcr.io / k8s.gcr.io 等原生镜像的。 使用比较权威的三方源 aliyun , qcloud 将 gcr.io push 到 hub.docker.com 自建镜像代理 域名翻墙 域名翻墙 通过域名劫持，将目标地址直接解析到代理服务器上。 sniproxy 所有你需要的， 一个能直接访问 gcr.ip 的 https(443) 代理。 通过 sniproxy 实现。 通过 防火墙 , 安全组 限制访问来源。 1 2 # docker run -d --rm --network host --name sniproxy</description></item><item><title>docker multi-stage build</title><link>https://tangx.in/posts/2018/10/30/docker-multi-stage-build/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2018/10/30/docker-multi-stage-build/</guid><description>Docker multi-stage build Multi-stage 构建，最大的好处是 Docker 本身在构建过程中提供了一个缓存空间，将上一个 stage 的结果通过 COPY --from=&amp;lt;stage&amp;gt; 复制到下一个 stage。 这样就大大简化了镜像清理工作。 这里， docker 官方文档已经对 Multi-stage build 已经有详细说明了。 multi-stage 要求 docker version &amp;gt;= 17.05 举例 每一个 FROM 关键字都表示此处是一个 stage 对 stage 使用命令的关键字是 as ， 例如 FROM alpine:latest as initer 在引用</description></item><item><title>使用 docker-compose 发布 dokuwiki</title><link>https://tangx.in/posts/2017/09/28/docker-compose-file-nginx-and-php-and-dokuwiki/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/09/28/docker-compose-file-nginx-and-php-and-dokuwiki/</guid><description>使用 docker-compose 发布 dokuwiki 总结： php file not found: 因为 php 容器找不到 php 文件 将 dokuwiki 也映射到 php 容器即可 permission denied : 因为容器中跑 fpm 的 用户ID 与 本地用户ID 不同，从而导致容器无法修改 dokuwiki 目录中的文件。 创建 dockerfile 重新 build php 镜像，是二者 用户ID 一致即可。 php file not found 之前一直在同一台机器上配置 php 和 nginx ， 因此用来没注意到， php 程序需要对 nginx root 目录</description></item><item><title>Dockerfile 基础命令</title><link>https://tangx.in/posts/2016/11/18/dockerfile-commonds-usage/</link><pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2016/11/18/dockerfile-commonds-usage/</guid><description>Dockerfile 基础命令 Dockerfile 有十几条命令可用于构建镜像，下文将简略介绍这些命令。 FROM FROM 命令可能是最重要的 Dockerfile 命令。改命令定义了使用哪个基础镜像启动构建流程。基础镜像可以为任意镜像。如果基础镜像没有被发现， Docker 将试图从 Docker image index 来查找该镜像。FROM 命令必须是Dockerfile的首个命令。 # Usage: FROM [image name] # FROM 之</description></item><item><title>docker官方文档，中文汉化项目</title><link>https://tangx.in/posts/2016/11/03/docker/</link><pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2016/11/03/docker/</guid><description>说明 本项目根据学习进度不定时更新。 所有文章已经放在 github 上了。 并且通过 gitbook 发布。 docker官方文档，中文汉化项目 docker官方文档，中文汉化项目 项目简介 项目简介 第1章 安装运行与卸载 C01S01 在CentOS7上使用二进制包安装 系统环境要求 安装 使用yum安装 使用脚本安装 设置docker daem</description></item></channel></rss>