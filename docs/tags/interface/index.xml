<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>interface on 老麦的书房</title><link>https://typonotes.com/tags/interface/</link><description>Recent content in interface on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 20 Mar 2023 23:09:55 +0800</lastBuildDate><atom:link href="https://typonotes.com/tags/interface/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Reflect Interface Deeopcopy</title><link>https://typonotes.com/posts/2023/03/20/golang-reflect-interface-deeopcopy/</link><pubDate>Mon, 20 Mar 2023 23:09:55 +0800</pubDate><guid>https://typonotes.com/posts/2023/03/20/golang-reflect-interface-deeopcopy/</guid><description>「Golang反射实战2」 使用 接口(interface) 实现 深拷贝(deepcopy) 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/03/20/golang-reflect-interface-deeopcopy/ interface 接口 deepcopy 的实现 对于 接口 interface{} 就稍微麻烦一点了。 由于 接口 是一组方法的集合， 也就意味着 接口的 底层结构体 是不定的。 无</description></item><item><title>「建议收藏」 十篇文章带你 Golang Cobra 入门到实战（含源码讲解）</title><link>https://typonotes.com/posts/2023/03/02/cobra-book/</link><pubDate>Thu, 02 Mar 2023 21:17:06 +0800</pubDate><guid>https://typonotes.com/posts/2023/03/02/cobra-book/</guid><description>「建议收藏」 十篇文章带你 Golang Cobra 入门到实战（含源码讲解） 大家好， 我是老麦。 一头专注 Golang 和 K8s 的胖熊猫。 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/03/02/cobra-book/ Cobra 知识点讲解 时间不知不觉到了 3 月， 我们的 DevOpsCamp 也到了 第4期。 在前面的内容中， 我尝试通过将 cobra 拆解成一个个</description></item><item><title>Golang 接口(interface) 简介和入门使用</title><link>https://typonotes.com/posts/2023/02/28/devopscamp-interface-sample/</link><pubDate>Tue, 28 Feb 2023 15:47:15 +0800</pubDate><guid>https://typonotes.com/posts/2023/02/28/devopscamp-interface-sample/</guid><description>Golang 接口(interface) 简介和入门使用 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/02/28/devopscamp-interface-sample/ 上下文 interface 应该是 Go语言 中一个极其重要的 基石 概念了。 这里有一篇 Go 语言设计与实现 - 接口 interface ， 是目前我学习的资料中 完成度 和 友善度 都很高的一篇文章。 在 go v1.18 中， interface</description></item><item><title>golang deepcopy 的两种实现方式</title><link>https://typonotes.com/posts/2021/12/14/golang-struct-interface-deepcopy/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/12/14/golang-struct-interface-deepcopy/</guid><description>Golang 实现深拷贝(DeepCopy)的两种方式 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2021/12/14/golang-struct-interface-deepcopy/ golang deepcopy 的两种实现方式 最近在基于 gin 封装 rum-gonic - github web 框架的过程中，遇到了一个问题。 在注册路由的时候传递是 指针对象， 因此造成所有的 request 请求使用相同的 CreateUser 对象, 出现并发</description></item></channel></rss>