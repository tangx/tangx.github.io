<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tools on 一壶酒一溪云</title><link>https://tangx.in/tags/tools/</link><description>Recent content in tools on 一壶酒一溪云</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 17 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tangx.in/tags/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>dnsx - 一款支持多解析商的命令行 dnsx 客户端</title><link>https://tangx.in/posts/2021/06/17/dnsx/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/06/17/dnsx/</guid><description>dnsx - 一款支持多解析商的命令行 dnsx 客户端 多支持多运营商的 DNS 命令行 客户端。 Usage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 DNSx 配置管理 DNS 解析 Usage: dnsx [command] Available Commands: add 添加域名解析 configure 管理配置文件 delete 删除解析记录 help Help about any command search 查询记录信息 switch 切换域名状态 Flags: -c, --config string config file (default &amp;#34;$HOME/.dnsx/dnsx.json&amp;#34;) -h, --help help for dnsx -p, --profile string profile (default &amp;#34;default&amp;#34;) Use &amp;#34;dnsx [command] --help&amp;#34; for more information about a command. dnsx profile configure dnsx</description></item><item><title>k8s 部署工具 kustomize 的实用小技巧</title><link>https://tangx.in/posts/2020/12/05/kusutomize-usage-tips/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/12/05/kusutomize-usage-tips/</guid><description>k8s 部署工具 kustomize 的实用小技巧 在 k8s 上的部署， 大多组件都默认提供 helm 方式。 在实际使用中， 常常需要针对不通环境进行差异化配置。 个人觉得， 使用 kustomize 替换在使用和管理上，比直接使用 helm 参数更为清晰 。 同时组件在一个大版本下的部署方式通常不会有太大的变化， 没有必要重新维护一套部署文档，其实也不一定有精力这</description></item><item><title>使用 sqlmap 根据变量位置定点注入 restful api</title><link>https://tangx.in/posts/2020/12/02/sqlmap-injection-restful/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/12/02/sqlmap-injection-restful/</guid><description>使用 sqlmap 根据变量位置定点注入 restful api sqlmap 是一款强劲自动化的 sql 注入工具， 使用 python 开发， 支持 python 2/3。 RESTful API 规则几乎是当前开发执行的默认规范。 在 restful 接口中， 常常将变量位置放置在 url 中。 例如 http://127.0.0.1:8080/{user}/profile ， 其中 {user} 就是变量，根据代码实现方式，可以等价于 http://127.0.0.1:8080/profile?user={user} 。 那么， 在对这类 restful 接口进行 sql 注入的时候，又该注意什么呢？ 本文将</description></item></channel></rss>