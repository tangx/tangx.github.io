<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kustz on 一壶酒一溪云</title><link>https://typonotes.com/tags/kustz/</link><description>Recent content in kustz on 一壶酒一溪云</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 05 Jan 2023 13:28:03 +0800</lastBuildDate><atom:link href="https://typonotes.com/tags/kustz/index.xml" rel="self" type="application/rss+xml"/><item><title>从零开始写 k8s 发布工具 - 1.0. kustz 介绍和设计思想</title><link>https://typonotes.com/posts/books/kustz/chapter01/01-introduce/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter01/01-introduce/</guid><description>从零开始写 k8s 发布工具（1） - kustz 介绍和设计思想 介绍 如果要在 Kubernets 发布一个应用， 并对外提供服务， 需要配置诸如 Dep, Ing, Svc 等 Config API。 他们之间又是通过 Label 组合选择而实现的 松耦合。 如果想要这些 Config API 之间的关系更加紧密， 我们可以自己再向上抽象， 通过自己的配置将他们整合在一起。 更重要的是， 我们可以通过这层</description></item><item><title>从零开始写 k8s 发布工具 - 2.1. 模仿 kubectl create 创建 Deployment 样例</title><link>https://typonotes.com/posts/books/kustz/chapter02/01-sample-deployment/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter02/01-sample-deployment/</guid><description>2.1. 模仿 kubectl create 创建 Deployment 样例 为了简单， 我们假定所管理的 Deployment 都是 单容器 的。 首先参考 kubectl create 命令 1 $ kubectl create deployment my-dep --image=busybox --replicas 1 --dry-run=client -o yaml 安装 client-go API 访问 client-go https://github.com/kubernetes/client-go 1 $ go get k8s.io/client-go@v0.25.4 这里直接选用最新版本 v0.25.4。 对于其他版本的兼容， 留在以后再做。 定义 Kustz Config 参考 kubectl create 命令， 创建配置文件 kustz.yml 结构如下 1 2 3 4 5 6 7 8 # kustz.yml namespace: demo-demo name: srv-webapp-demo service: name: nginx image: docker.io/library/nginx:alpine</description></item><item><title>从零开始写 k8s 发布工具 - 2.2. 定义字符串创建 Service</title><link>https://typonotes.com/posts/books/kustz/chapter02/02-define-strings-to-service/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter02/02-define-strings-to-service/</guid><description>2.2. 定义字符串创建 Service 大家好， 我是老麦， 一个小运维。 今天我们为 kustz 增加 service 解析功能。 通过 kubectl create service 命令可以看到， service 的模式还是挺多的。 1 2 3 4 5 6 7 8 9 10 11 $ kubectl create service -h Create a service using a specified subcommand. Aliases: service, svc Available Commands: clusterip Create a ClusterIP service externalname Create an ExternalName service loadbalancer Create a LoadBalancer service nodeport Create a NodePort service 除了以上列出来的四种之外， 还用一种 Headless Service( https://kubernetes.io/docs/concepts/services-networking/service/#headless-services )。 Headless Service 是当 类型 为 Clu</description></item><item><title>从零开始写 k8s 发布工具 - 2.3. 解析 URL 为 Ingress</title><link>https://typonotes.com/posts/books/kustz/chapter02/03-parse-url-to-ingress/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter02/03-parse-url-to-ingress/</guid><description>2.3. 解析 URL 为 Ingress 之前已经提到过， 在 kustz.yml 中的字段值， 要尽量做到 见名知义。 对于 Ingress 而言， 在发布之后， 我们访问的就是 URL 地址。 http://api.example.com/v1 因此我们可以考虑 从结果推导解析渲染 Ingress 。 Kubernetes Ingress 老规矩， 我们还是通过命令看看创建一个 ingress 需要提供哪些参数。 1 2 $ kubectl create ingress simple --rule=&amp;#34;foo.com/bar=svc1:8080,tls=my-cert&amp;#34; -o yaml --dry-run=client 在 rule 中， 提供了两组 k-v。 其中， foo.com/bar 就是一个不带协</description></item><item><title>从零开始写 k8s 发布工具 - 2.4. 使用 kustomize 管理所有 k8s 文件</title><link>https://typonotes.com/posts/books/kustz/chapter02/04-kustomize/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter02/04-kustomize/</guid><description>2.4. 使用 kustomize 管理所有 k8s 文件 前面已经简单的封装了 Deployment, Service, Ingress， 完成了零部件的创建。 今天就通过 Kustomization 进行组装， 实现流水线。 Kustomize 开始之前， 先来安装 kustomize 库。 1 $ go get sigs.k8s.io/kustomize/v3 这里补充一下， 访问 Github https://github.com/kubernetes-sigs/kustomize/ 。 kustomize () 首页 README.md 并没有提到 go get 的包名。 通常 k8s 的代码在 github 上都是镜像。 这时候只需要进到 go.mod ， 包名就一目了然。 1 2 3 4</description></item><item><title>从零开始写 k8s 发布工具 - 2.5. 使用 cobra 实现 kustz 命令</title><link>https://typonotes.com/posts/books/kustz/chapter02/05-kustz-cli/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter02/05-kustz-cli/</guid><description>2.5. 使用 cobra 实现 kustz 命令 有了前面几章的努力， 我们的命令行工具 kustz 终于要问世了。 kustz 命令 当前命令功能就很简单。 default: 输出 kustz 默认配置。 render: 读取 kustz 配置并生成 kustomize 配置四件套。 1 2 3 4 5 $ kustz -h Available Commands: default 在屏幕上打印 kustz 默认配置 render 读取 kustz 配置， 生成 kustomize 所需文件 编码 本章的代码都很简单， 就是设计的文件比较多。 使用 cobra 创建命令</description></item><item><title>从零开始写 k8s 发布工具 - 3.1. 为 Container 添加环境变量</title><link>https://typonotes.com/posts/books/kustz/chapter03/01-container-env-var/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter03/01-container-env-var/</guid><description>3.1. 为 Container 添加环境变量 再前面一章中， 我们已经完成了 Deployment, Service, Ingress 和 Kustomization API 的封装。 并通过 cobra 库创建了属于我们自己的 kustz 命令。 然而 kustz 的功能还简陋。 今天我们就先来为容器添加环境变量。 为容器设置环境变量 在官方文档中， 提高了两种为容器设置环境变量的方法 https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/ env: 提供 k-v 模式 键值对。 值可以直接 value 提供。 也可以通过 valueFrom 从 secret</description></item><item><title>从零开始写 k8s 发布工具 - 3.2. ConfigMap 和 Secret 的生成器</title><link>https://typonotes.com/posts/books/kustz/chapter03/02-configmap-secret-generator/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter03/02-configmap-secret-generator/</guid><description>3.2. ConfigMap 和 Secret 的生成器 上一节我们通过 k-v 和 YAML文件 为容器添加环境变量。 同时也提到了可以通过 envFrom 这个关键字， 直接读取 ConfigMap 或 Secret 中的 k-v 作为容器的环境变量。 除了环境变量之外， ConfigMap 和 Secret 还能管理的东西还很多。 所以我个人觉得单应用管理部署的话， 对于配置的管理，还是比较重要的。 Kustomize 中的 ConfigMap Env File 在 kustzomize 中， ConfigMap 和 Secret 都</description></item><item><title>从零开始写 k8s 发布工具 - 3.3. 注入 ConfigMap 和 Secrets 到容器环境变量</title><link>https://typonotes.com/posts/books/kustz/chapter03/03-container-env-from/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter03/03-container-env-from/</guid><description>3.3. 注入 ConfigMap 和 Secrets 到容器环境变量 大家好， 我是老麦。 一个运维小学生。 有了前面两张的铺垫， 今天这个很简单。 我们说说另外一种为容器注入环境变量的方式。 容器变量注入 EnvFrom 前面我们提到过， Container 有两种方式定义环境变量， 其中一种就是 envFrom， 从 ConfigMap 或 Secret 中读取所有键值对作为容器的变量。 ConfigMap 和 Secret 看起来是这样</description></item><item><title>从零开始写 k8s 发布工具 - 3.4. 用字符串定义容器申请资源上下限</title><link>https://typonotes.com/posts/books/kustz/chapter03/04-container-resources/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter03/04-container-resources/</guid><description>3.4. 用字符串定义容器申请资源上下限 Pod 的资源申请， 在调度策略中， 是一个重要的参数数据。 因此其重要性自然不必多说 容器资源申请 在官网中， 对于资源的申请和管理有详细的描述。 https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/ 和 服务质量 QoS 息息相关， https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/quality-service-pod/ 这里简单的归类， 可以速记， 按照服务质量高到低 Guaranteed: request = limit Burstable: request &amp;lt; limit BestEffort: 没有 request 和 limit kustz.yml 配置 还是先来看看 kustz.yml</description></item><item><title>从零开始写 k8s 发布工具 - 3.5. 为 Container 添加健康检查方法</title><link>https://typonotes.com/posts/books/kustz/chapter03/05-container-probe/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter03/05-container-probe/</guid><description>3.5. 为 Container 添加健康检查方法 kustz 终于到了准生产的地步了。 今天的健康检查接口， 就为我们解决这个问题。 我们要知道， 确定一个应用能不能对外提供服务之前， 需要进行一个 可用性 检测。 而这个检测通常被我们称为 健康检查。 Kubernetes 的健康检查 在 Kubernetes 中， 为我们提供了 主要 的 3类状态 的健康检查。 startup: 等待探针。 如果执行成功，</description></item><item><title>从零开始写 k8s 发布工具 - 3.6. 镜像拉取鉴权和策略</title><link>https://typonotes.com/posts/books/kustz/chapter03/06-image-pull-policy/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter03/06-image-pull-policy/</guid><description>3.6. 镜像拉取鉴权和策略 今天我们解决镜像拉取鉴权和策略 镜像拉取鉴权 拉取私有镜像或私有仓库镜像的时候， 需要提供鉴权信息。 在 Kubernets 中， 通过 Secret 管理账号这些账号信息。 Secret 类型分为两种， kubernetes.io/dockerconfigjson: 如果有linux安装了 docker， 就是 ~/.docker/config.json 这个文件。 kubernetes.io/dockercfg: 不太熟。 在 /pkg/tokube/pod.go 中， 可以看到 ImagePullSecrets 的处理方法。 就是将字符串转为 kubernetes 的</description></item><item><title>从零开始写 k8s 发布工具 - 4.1. 使用 cobrautils 为命令添加更实用的命令参数</title><link>https://typonotes.com/posts/books/kustz/chapter04/01-kustz-flags/</link><pubDate>Thu, 05 Jan 2023 13:28:03 +0800</pubDate><guid>https://typonotes.com/posts/books/kustz/chapter04/01-kustz-flags/</guid><description>4.1. 使用 cobrautils 为命令添加更实用的命令参数 之前的章节， 我们陆陆续续给 kustz 库添加了很多丰富服务的配置 但 kustz 命令， 还是处于一个很原始的命令状态。 接下来我们给 kustz 添加一些更丰富的参数 ， 使 kustz 用起来更顺手。 在 CICD 的中， 一般情况下 变量，健康检查， 镜像策略 等很难发生变动。 而镜像名称 经常性 的在每次打包后发生变化</description></item><item><title>怎么在 Kustomize 中添加多行变量</title><link>https://typonotes.com/posts/2023/01/05/how-to-create-multiple-line-variables-in-kustomize/</link><pubDate>Thu, 05 Jan 2023 13:09:55 +0800</pubDate><guid>https://typonotes.com/posts/2023/01/05/how-to-create-multiple-line-variables-in-kustomize/</guid><description>怎么在 Kustomize 中添加多行变量 原文链接: https://tangx.in/posts/2023/01/05/how-to-create-multiple-line-variables-in-kustomize/ kustomize 是 k8s 官方出的一个 应用管理工具 ， 说起来还是很好用的。 可以参考 k8s 部署工具 kustomize 的实用小技巧 Kustomize 中的 ConfigMap/Secrets Generator 在配置管理方面， kustomize 为我们提供了 Generator 帮助我们管理配置文件。 提供了三个 API 模块 files: 通过 文件 生成 文件 literals: 通过文字 字面量 k=v 生成 k=v 数据 envs: 通过 文件 生成 k=v 数据。 这个应该是 files 和</description></item></channel></rss>