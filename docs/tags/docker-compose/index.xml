<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker-compose on 老麦的书房</title><link>https://typonotes.com/tags/docker-compose/</link><description>Recent content in docker-compose on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 22 Mar 2023 11:01:51 +0800</lastBuildDate><atom:link href="https://typonotes.com/tags/docker-compose/index.xml" rel="self" type="application/rss+xml"/><item><title>云原生: 为开发朋友解答的 100 个问题</title><link>https://typonotes.com/posts/2023/03/22/docker-100-questions-for-developers/</link><pubDate>Wed, 22 Mar 2023 11:01:51 +0800</pubDate><guid>https://typonotes.com/posts/2023/03/22/docker-100-questions-for-developers/</guid><description>云原生: 为开发朋友解答的 100 个问题 如果在 公众号 文章发现状态为 已更新， 建议点击 查看原文 查看最新内容。 状态: 未更新 原文链接: https://typonotes.com/posts/2023/03/22/docker-100-questions-for-developers/ 1. 镜像与服务 1.1. 容器内服务监听地址 0.0.0.0 用 0.0.0.0 是最省事的方法。 如果不嫌弃麻烦， 程序可以自己获取网卡地址 监听本地IP。 通常在开发的时候， 在本地调试喜欢用 127.0.0.1</description></item><item><title>使用 docker-compose 发布 dokuwiki</title><link>https://typonotes.com/posts/2017/09/28/docker-compose-file-nginx-and-php-and-dokuwiki/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2017/09/28/docker-compose-file-nginx-and-php-and-dokuwiki/</guid><description>使用 docker-compose 发布 dokuwiki 总结： php file not found: 因为 php 容器找不到 php 文件 将 dokuwiki 也映射到 php 容器即可 permission denied : 因为容器中跑 fpm 的 用户ID 与 本地用户ID 不同，从而导致容器无法修改 dokuwiki 目录中的文件。 创建 dockerfile 重新 build php 镜像，是二者 用户ID 一致即可。 php file not found 之前一直在同一台机器上配置 php 和 nginx ， 因此用来没注意到， php 程序需要对 nginx root 目录</description></item></channel></rss>