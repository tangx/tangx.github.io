<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>反射 on 老麦的书房</title><link>https://tangx.in/tags/%E5%8F%8D%E5%B0%84/</link><description>Recent content in 反射 on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 27 Jan 2023 09:08:25 +0800</lastBuildDate><atom:link href="https://tangx.in/tags/%E5%8F%8D%E5%B0%84/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Envutils Config</title><link>https://tangx.in/posts/2023/01/27/golang-envutils-config/</link><pubDate>Fri, 27 Jan 2023 09:08:25 +0800</pubDate><guid>https://tangx.in/posts/2023/01/27/golang-envutils-config/</guid><description>Golang Envutils Config 原文链接: https://tangx.in/posts/2023/01/27/golang-envutils-config/ 用习惯了 struct 之后， 我想所有东西都通过 struct 管理。 学习了反射之后， 我总要找点事情做来练习。 于是我整合了 Golang环境变量操作 和 Golang反射， 以及解决了我认为的其他一些配置管理的痛点， 便有了这个项目。 一篇文章告诉你 golang 环境变量的所有基础操作 失败99次之后， 我总记了 Github 仓</description></item><item><title>经过99次失败后， 我总结了几点 Golang 反射的经验（附源码）</title><link>https://tangx.in/posts/2021/09/22/golang-reflect/</link><pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/22/golang-reflect/</guid><description>经过99次失败后， 我总结了几点 Golang 反射的经验（附源码） golang 反射很好用， 也有很多坑。 代码在: https://github.com/tangx-labs/golang-reflect-demo Kind 和 Type 在 golang 的反射中， 有两个可以表示 类型 的关键字， Kind 和 Type 。 定义覆盖范围 Kind 的定义覆盖范围比 Type 要大。 Kind 在定义上要 更抽象， Type 要更具体。 可以简单理解为， 如果 Kind 是 车 ， 那么 Type 可能是 公交车 、 消防车 内置类型字面</description></item></channel></rss>