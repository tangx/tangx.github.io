<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devkit on 老麦的书房</title><link>https://typonotes.com/tags/devkit/</link><description>Recent content in devkit on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 16 Dec 2024 16:34:29 +0800</lastBuildDate><atom:link href="https://typonotes.com/tags/devkit/index.xml" rel="self" type="application/rss+xml"/><item><title>(3) 静态前端网站容器化 - 容器篇</title><link>https://typonotes.com/posts/2024/12/16/static-website-container-image/</link><pubDate>Mon, 16 Dec 2024 16:34:29 +0800</pubDate><guid>https://typonotes.com/posts/2024/12/16/static-website-container-image/</guid><description>(3) 静态前端网站容器化 - 容器篇 建议点击 查看原文 查看最新内容。 原文链接: https://typonotes.com/posts/2024/12/16/static-website-container-image/ 相关连接 (1) 静态前端网站容器化 - 理论篇 (2) Vue3 / React 静态网站项目容器化 - 实战案例 对于容器的选择， 其实没什么多数说的， 普通的 nginx 就可以了， 或者类似 caddy 这些都行。 如果由于某些权限问题， 选择了 nginxinc/nginx-unprivileged - docker-hub 则需要注意， /usr/share/nginx/html 权限归于 root 启动用</description></item><item><title>(2) Vue3 / React 静态网站项目容器化 - 实战案例</title><link>https://typonotes.com/posts/2021/09/01/typescript-for-of-interface-and-assert-keyof-type/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/09/01/typescript-for-of-interface-and-assert-keyof-type/</guid><description>Vue3 / React 静态网站项目容器化 - 实战案例 在前端容器化的时候， 有一个绕不开的问题： 容器返回的后端地址应该怎么设置。 静态编译到所有文件中， 肯定是不可取的， 总不能后端变更一个访问域名，前端都要重新构建一次镜像吧？ 由于 js (typescript 编译后 ) 实际是运行在 用户的浏览器上， 所以也不能像后端一样读取环境变量。 所</description></item><item><title>(1) 静态前端网站容器化 - 理论篇</title><link>https://typonotes.com/posts/2021/05/22/frontend-webapp-dockerize-final/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/05/22/frontend-webapp-dockerize-final/</guid><description>使用js读取html meta 实现静态前端网站容器化 之前写过一篇关于前端容器化的文章， 静态前端网站容器化 。 现在看来， 那个方案的可操作性并不高， 而且很弱智。 其中实现是需要使用 sed 替换 所有文件 中的占位符。 然后， js 本身是可以通过 html meta 传递信息的。 以下， 则是 通过 js 获取 html meta 信息以实现前端容器化 1. 重新整</description></item></channel></rss>