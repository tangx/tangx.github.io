<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dockerfile on 老麦的书房</title><link>https://tangx.in/tags/dockerfile/</link><description>Recent content in dockerfile on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 07 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tangx.in/tags/dockerfile/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 docker buildx 实现多平台编译 - 案例篇</title><link>https://tangx.in/posts/2020/11/07/docker-buildx-examples/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/11/07/docker-buildx-examples/</guid><description>使用 docker buildx 实现多平台编译 - 案例篇 之前的文章中 使用 docker buildx 实现多平台编译 - 环境篇 介绍了如何部署 docker buildx 环境。 笔者本文将要分享自身在使用中的几个比较有意义的案例 0x00 先说结论 docker buildx 本身运行于容器环境， 所以 scheduler 和 builder 本机配置（ex, /etc/hosts, /etc/docker/daemon.json ） 的大部分配置和场景 其实是不可用的。 使用 ssh://user@host 可以方便的执行远程构建， 尤其</description></item><item><title>Dockerfile 中 ARG 的使用与其的作用域探究</title><link>https://tangx.in/posts/2020/11/06/dockerfiles-args-scope/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2020/11/06/dockerfiles-args-scope/</guid><description>只有搞懂 Dockerfile 中的 ARG 作用域， 才能算 Build 镜像 CI 刚入门 之前我们讨论了 面试问 Dockerfile 的优化， 千万不要只会说减少层数 ， 详细说明 Dockerfile 的优化原理和操作方法， 给大家概括了 简单易记 的口诀。 今天， 我们继续来探讨一下， Dockerfile 中的另外一个利器 &amp;ndash; ARG。 如果说掌握 Dockerfile 的优化， 勉强算作读完秘籍的目录。 那只有 熟练 掌握了 ARG 的用法</description></item><item><title>使用 Dockerfile 构建镜像注意事项</title><link>https://tangx.in/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</link><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2019/03/26/how-to-build-a-image-with-dockerfile/</guid><description>面试问 Dockerfile 的优化， 千万不要只会说减少层数 在面试的时候， 我通常都会问「如果优化 Dockerfile」？ 面试的朋友大部分都会说 使用更小的基础镜像， 比如 alpine. 减少镜像层数， 使用 &amp;amp;&amp;amp; 符号将命令链接起来。 好一点的面试者 我会给基础镜像打上 安全补丁。 但这些都没说到点上。 优化 Dockerfile 的核心是 合理分层。 为什么要</description></item><item><title>使用 docker-compose 发布 dokuwiki</title><link>https://tangx.in/posts/2017/09/28/docker-compose-file-nginx-and-php-and-dokuwiki/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2017/09/28/docker-compose-file-nginx-and-php-and-dokuwiki/</guid><description>使用 docker-compose 发布 dokuwiki 总结： php file not found: 因为 php 容器找不到 php 文件 将 dokuwiki 也映射到 php 容器即可 permission denied : 因为容器中跑 fpm 的 用户ID 与 本地用户ID 不同，从而导致容器无法修改 dokuwiki 目录中的文件。 创建 dockerfile 重新 build php 镜像，是二者 用户ID 一致即可。 php file not found 之前一直在同一台机器上配置 php 和 nginx ， 因此用来没注意到， php 程序需要对 nginx root 目录</description></item></channel></rss>