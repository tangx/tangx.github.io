<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vue on 老麦的书房</title><link>https://tangx.in/tags/vue/</link><description>Recent content in vue on 老麦的书房</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 26 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tangx.in/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>gin 实现首页不缓存</title><link>https://tangx.in/posts/2021/11/26/index-no-cache-in-gin/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/11/26/index-no-cache-in-gin/</guid><description>在 gin 中实现首页不缓存 之前提到了在 nginx 中添加响应头 Cache-Control: no-cache 不缓存首页， 以便每次发布 CDN 都能回源到最新的资源。 nginx 的配置可能都是实施人员的操作， 或许不在掌控范围内。 自己控制起来很简单， 无非就是加一个 Header 头嘛。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { r := gin.Default() // 一</description></item><item><title>nginx 实现首页不缓存</title><link>https://tangx.in/posts/2021/11/25/index-no-cache-in-nginx/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/11/25/index-no-cache-in-nginx/</guid><description>nginx 实现首页不缓存 前端上 CDN 加速， 后端上 DCDN， 加速网站访问速度。 前端代码编译的时候， 可以加上 hash 值使编译后的产物名字随机， 可以在不刷新 CDN 资源 的情况下， 保障页面展示最新。 虽然对多了一点回源， 但减少了人工操作。 但是 首页不能被缓存， 否则于事无补。 对于首页的缓存设置， 有一点注意事项， 其一 ，</description></item><item><title>vue3 安装 vue-router 支持</title><link>https://tangx.in/posts/2021/09/28/vue3-vue-router/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/28/vue3-vue-router/</guid><description>安装 vue-router 路由支持 在 vue3 中使用的是 vue-router@next 版本 ^4.y.z 1 yarn add vue-router@next /src/router/index.ts 创建路由规则 安装之后， 在创建文件 /src/router/index.ts 作为 vue-router 的初始化文件。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // 导入创建路由所需的组件 import { createRouter, createWebHistory } from &amp;#34;vue-router&amp;#34;; // 路由目标组件 import HelloWorld from &amp;#39;../components/HelloWorld.vue&amp;#39; import World from &amp;#39;../components/World.vue&amp;#39; // 路由表 const routes = [ { path: &amp;#34;/helloworld&amp;#34;, name: &amp;#34;HelloWorld&amp;#34;, component: HelloWorld }, { path: &amp;#34;/world&amp;#34;, name: &amp;#34;World&amp;#34;, component: World } ] // 创</description></item><item><title>vue3 使用 @ 路径别名</title><link>https://tangx.in/posts/2021/09/28/vue3-with-alias-path/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/09/28/vue3-with-alias-path/</guid><description>使用 @ 路径别名 在使用 import 的时候， 可以使用相对路径 ../components/HelloWorld.vue 指定文件位置， 但这依赖文件本身的位置，在 跨目录 的时候， 并不方便。 例如， 路由文件 要使用 Components 组件 1 2 3 4 // file: /src/router/index.ts // 路由目标组件 import HelloWorld from &amp;#39;../components/HelloWorld.vue&amp;#39; import World from &amp;#39;../components/World.vue&amp;#39; 要使用路径别名， 需要进行一些额外配置 安装 @types/node 支持 安装 @types/node 组件 1 yarn add @types/node 在 tsconfig.json 中， compilerOptions 下配置 1 2 3 4 5 6 7 8 9</description></item><item><title>vue3 使用 vite2 初始化项目</title><link>https://tangx.in/posts/2021/08/31/vue3-vite2-initial/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://tangx.in/posts/2021/08/31/vue3-vite2-initial/</guid><description>vue3 使用 vite2 初始化项目 vue3 + vite2 + typescript 配置 使用 vite2 创建项目 1 2 3 4 5 6 # 交换式 yarn create vite # 非交互式 yarn create vite project-name --template vue-ts 创建项目之后， cd project-name 进入项目， 是用 yarn 安装依赖， 使用 yarn dev 运行程序。 安装 less 支持 less 是 css 的一个超集。 yarn add less 安装之后， 可以在 CompName.vue 中使用 less 语法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // CompName.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;div1&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;div1&amp;lt;/h3&amp;gt; &amp;lt;div class=&amp;#34;div2&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;div2&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt;</description></item></channel></rss>