<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on 一壶酒一溪云</title><link>https://typonotes.com/tags/mysql/</link><description>Recent content in mysql on 一壶酒一溪云</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://typonotes.com/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Mysql 外键</title><link>https://typonotes.com/posts/2021/12/08/mysql-foreign-key/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/12/08/mysql-foreign-key/</guid><description>Mysql 外键 如果说 mysql 中的 left/right/out join 查询 软链接 关系， 只是通过看似有关系的字段把两张表聚合在一起。 那么 foreign key 就是 硬连接 ， 实实在在把两张表聚合在一起。 如果数据的字段的值 不符合 所连接表， 将不允许输入 插入或修改 数据。 创建外键 准备环境 1 2 3 4 5 6 7 create database day123 default charset utf8 collate utf8_general_ci; use day123; create table depart( id int not null primary key auto_increment, name varchar(32) not null ) default charset=utf8; 创建</description></item><item><title>mysql 查询操作</title><link>https://typonotes.com/posts/2021/12/07/mysql-select-operation/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/12/07/mysql-select-operation/</guid><description>mysql 查询操作 初始化环境 创建数据库， 1 2 3 4 -- create database create database day111 default charset utf8 collate utf8_general_ci; use day111; 创建用户表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 -- create table user create table user ( id int not null primary key auto_increment, name varchar(6) not null, password varchar(32) not null, age int, salary int null default 0, depart_id int not null ) default charset=utf8; -- insert into `user` (name, `password`, age, salary,depart_id) values (&amp;#34;诸葛亮&amp;#34;,&amp;#34;zhuge123&amp;#34;,3</description></item><item><title>mysql table 操作</title><link>https://typonotes.com/posts/2021/12/06/mysql-table-operation/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/12/06/mysql-table-operation/</guid><description>Mysql - table 操作 创建数据库 1 create database 数据库名 default charset utf8 collate utf8_general_ci; 查看所有表 1 show tables; 创建数据表 1 2 3 4 5 6 7 8 9 10 11 12 13 create table 表名( 列名 类型, 列名 类型 ) default charset=utf8; --- create table user ( id int not null auto_increment primary key, -- 不允许为空，主键, 自增 name varchar(16) not null, -- 不允许为空 email varchar(32) null, -- 允许为空， 长度为 32 age int default 3 -- 默认值 ) default charset=urf8; 注意 : 一张表只能 有且只有一个 自增列</description></item><item><title>Mysql 常见数据类型 int char timestamp</title><link>https://typonotes.com/posts/2021/12/06/mysql-data-type/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/12/06/mysql-data-type/</guid><description>Mysql 数据类型 https://dev.mysql.com/doc/refman/5.7/en/data-types.html 整数类型 1 2 3 4 5 6 7 8 mysql root@localhost:db1&amp;gt; create table table_int( int_no int unsigned, biging_no bigint, tinyint_no tinyint ) default charset=utf8; Query OK, 0 rows affected Time: 0.028s int 取值范围 -2^31 ~ 2^31-1 unsigned : 取之范围 0 ~ 2^32-1 bigint 取值范围 -2^63 ~ 2^63-1 tinyint 取值范围 -128 ~ 127 小数类型 Float 使用 32位浮点数保存。 不精确。 Double 使用 64 位浮点数保存。 不精确。 Decimal decimal 精确的小数值， m 数字的总个数（负号部分不算， 含 小数部分）; d</description></item><item><title>Mysql 基础练习 01</title><link>https://typonotes.com/posts/2021/12/06/mysql-basic-pratice-01/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2021/12/06/mysql-basic-pratice-01/</guid><description>Mysql 基础练习 01 根据表格创建数据库表，注意编码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 create database db01 default charset utf8 collate utf8_general_ci; use db01; create table userinfo ( id int not null auto_increment primary key, name varchar(32) not null, password varchar(64) not null, gender enum(&amp;#39;male&amp;#39;,&amp;#39;female&amp;#39;) not null, email varchar(64) not null, amount decimal(10,2) not null default 0, ctime datetime ) default charset=utf8; show tables; +----------------+ | Tables_in_db01 | +----------------+ | userinfo | +----------------+ 1 row in set 插入任意五条数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>MYSQL 导出用户权限脚本</title><link>https://typonotes.com/posts/2017/10/24/mysql-backup-user-grants/</link><pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2017/10/24/mysql-backup-user-grants/</guid><description>MYSQL 导出用户权限脚本 分享一个抄来的 mysql 备份权限的脚本 。这个脚本最大的好处是通用，不用像之前那样备份 mysql.user 表而造成在不同 mysql 实例之间造成不必要的问题。 1 2 3 4 5 6 7 8 9 10 11 #!/bin/bash #Function export user privileges source /etc/profile pwd=your_password MYSQL_AUTH=&amp;#34; -uroot -p${pwd} -h127.0.0.1 --port=3306 &amp;#34; expgrants() { mysql -B ${MYSQL_AUTH} -N $@ -e &amp;#34;SELECT CONCAT(&amp;#39;SHOW GRANTS FOR &amp;#39;&amp;#39;&amp;#39;, user, &amp;#39;&amp;#39;&amp;#39;@&amp;#39;&amp;#39;&amp;#39;, host, &amp;#39;&amp;#39;&amp;#39;;&amp;#39;) AS query FROM mysql.user&amp;#34; | mysql ${MYSQL_AUTH} $@ | sed &amp;#39;s/\(GRANT .*\)/\1;/;s/^\(Grants for .*\)/-- \1 /;/--/{x;p;x;}&amp;#39; } expgrants &amp;gt; ./grants.sql http://www.cnblogs.com/huangmr0811/p/5570994.html</description></item><item><title>怎么通过命令行方式向 mysql 数据库导入一个大型备份文件</title><link>https://typonotes.com/posts/2017/08/03/how-to-import-a-large-sql-dump-file-to-a-mysql-database-from-command-line/</link><pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2017/08/03/how-to-import-a-large-sql-dump-file-to-a-mysql-database-from-command-line/</guid><description>怎么通过命令行方式向 mysql 数据库导入一个大型备份文件 接受了一个老项目，有个200多G 的文件需要恢复。里面有有几张记录日志的单表很大，在备份的时候没有使用 --extended-inster=False ， 因此，在使用 mysql database &amp;lt; file.sql 导入的时候，一不留神进程就死掉了。 google 了很久，最终得到以下答案 原文链接 ： https://cmanios.wordpress.com/2013/03/19/import-a-large-sql-dump-file-to-a-mysql-database-from-command-line/ 是通过在 mysql 交互界面中 source 文件的方式导入</description></item><item><title>使用 mysql 统计平均用户在线时长</title><link>https://typonotes.com/posts/2017/02/10/mysql-analysis-user-online-length/</link><pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2017/02/10/mysql-analysis-user-online-length/</guid><description>使用 mysql 统计平均用户在线时长 在表中，记录了用户 login/logout 的时间点（unix时间）。现在需要确定当日用户的在线时长总和，与平均在线时长。 简单的说，就是要求出匹配 userid 的 login/logout timestamp 的差值并求和。 问题在于： 其一，某些用户是跨天 login 或者 logout 的，这样当天的日志就没有可以匹配的 userid_login / userid_logout 。 其二，如果有些重度用户长时间在</description></item><item><title>Mysql 5.6 与5.7 密码权限问题</title><link>https://typonotes.com/posts/2016/12/30/mysql56-57-password-issue/</link><pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate><guid>https://typonotes.com/posts/2016/12/30/mysql56-57-password-issue/</guid><description>Mysql 5.6 与5.7 密码权限问题 在 5.6 和 5.7 中，Mysql 加强了密码的使用。 Mysql第一次启动的时候，会初始化一个随机的复杂密码，保存在 /var/log/mysqld.log 不再接受简单密码。即复杂密码为： 大小写、数字、符号 的组合。 在命令行中，不能直接使用 mysql -u$USER -p$PASSWORD 的方式了 在 bash script 中使用 mysql 如何在 bash script 中使用 mysql 密码 - stackoverflow.com 讨论 使用 client 配置 在</description></item></channel></rss>